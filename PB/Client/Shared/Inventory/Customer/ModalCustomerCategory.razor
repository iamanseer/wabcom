@using PB.Shared.Models.CRM.Customer
@using PB.Shared.Models.Common

<div class="modal fade" id="customer-category-modal">
    <div class="modal-dialog modal-dialog-scrollable modal-md" role="document">
        <EditForm Model="Model" autocomplete="off" OnValidSubmit="SaveCustomerCategory">
            <DataAnnotationsValidator />
            <div class="modal-content modal-content-demo">
                <div class="modal-header">
                    @if (Model.CategoryID != 0)
                    {
                        <h6 class="modal-title">@Model.CategoryName</h6>
                    }
                    else
                    {
                        <h6 class="modal-title">New Customer Category</h6>
                    }
                    <button type="button" aria-label="Close" class="btn-close" @onclick="async() => await HideCustomerCategoryModal()"><span aria-hidden="true">&times;</span></button>
                </div>

                <div class="modal-body">

                    <div class="row">

                        <InputTextBox Label="Category name:"
                                      DivClass="col-md-12"
                                      IsRequired="true"
                                      PlaceHolder="Category name"
                                      ValidationFor="() => Model.CategoryName"
                                      @bind-Value="Model.CategoryName"
                                      id="item-category-name-box" />

                    </div>
                </div>
                <div class="modal-footer">
                    @if (Model.CategoryID == 0)
                    {
                        <button type="submit" class="btn btn-primary">Save</button>
                        <button type="button" class="btn btn-danger" @onclick="async() => await HideCustomerCategoryModal()">Close</button>
                    }
                    else
                    {
                        <button type="submit" class="btn btn-primary">Update</button>
                        <button type="button" class="btn btn-danger" @onclick="async() => await HideCustomerCategoryModal()">Close</button>
                    }
                </div>
            </div>
        </EditForm>
    </div>
</div>



@code {
    [Parameter] public EventCallback<IdnValuePair> Saved { get; set; }

    private CustomerCategoryModel Model = new();

    public async Task OpenCustomerCategoryModal(int categoryID = 0)
    {
        Model = new();
        if (categoryID != 0)
        {
            Model = await API.GetAsync<CustomerCategoryModel>($"customer/get-customer-category/{categoryID}", true);
        }
        await JS.InvokeVoidAsync("ShowModal", "customer-category-modal");
    }
    private async Task HideCustomerCategoryModal()
    {
        await JS.InvokeVoidAsync("HideModal", "customer-category-modal");
    }
    private async Task SaveCustomerCategory()
    {
        var result = await API.PostAsync<CustomerCategorySuccessModel, CustomerCategoryModel>("customer/save-customer-category", Model);
        if (result is not null)
        {
            await Saved.InvokeAsync(new IdnValuePair()
                {
                    ID = result.CategoryID,
                    Value = result.CategoryName
                });
            await HideCustomerCategoryModal();
        }
    }
}
