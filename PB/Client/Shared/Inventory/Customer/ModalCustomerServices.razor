@using PB.CRM.Model.Enum
@using PB.Client.Shared.Inventory.Item
@using PB.Shared.Models.CRM.Customer
@using PB.Shared.Models.Common
@using PB.Shared.Models.Inventory.Item

<div class="modal fade" id="customer-service-modal">
    <div class="modal-dialog modal-dialog-scrollable modal-md" role="document">
        <EditForm Model="Model" autocomplete="off" OnValidSubmit="SaveCustomerCategory">
            <DataAnnotationsValidator />
            <div class="modal-content modal-content-demo">
                <div class="modal-header">
                    @if (Model.ServiceID != 0)
                    {
                        <h6 class="modal-title">@Model.ServiceName</h6>
                    }
                    else
                    {
                        <h6 class="modal-title">New Customer Service</h6>
                    }
                    <button type="button" aria-label="Close" class="btn-close" @onclick="async() => await HideCustomerCategoryModal()"><span aria-hidden="true">&times;</span></button>
                </div>

                <div class="modal-body">

                    <div class="row">

                        <DropdownSelect DropdownID="@(FooterItemDropdownID)" @ref="@FooterItemDropdownSelect"
                                        DivClass="col-md-12 px-0"
                                        FormGroupClass="form-group mb-0"
                                        Label="Service"
                                        IsAddOptionNeed="true"
                                        ReadDataOnSearch="true"
                                        RoleName="Item"
                                        Mode="(int)DropdownModes.Item"
                                        ModeGroup="(int)DropdownModes.CommonSearch"
                                        SelectedItem="@(new DropdownSelectedItemModel(){ID = Model.ItemID, Value = Model.ServiceName})"
                                        ItemSelected="ItemSelected"
                                        NewButtonText="New Item"
                                        NewButtonClicked="AddNewItem" />
                        <div class="col-md-12">
                            <div class="form-group">
                                <label class="form-label mt-0 me-1" style="text-align:left;">

                                    Date :
                                </label>
                                <div class="input-group">
                                    <input type="date" class="form-control" @bind="Model.Date">
                                </div>
                            </div>
                        </div>


                        <div class="col-md-12">
                            <div class="form-group">
                                <label class="form-label mt-0 me-1" style="text-align:left;">

                                    Quantity :
                                </label>
                                <div class="input-group">
                                    <input type="text" class="form-control" id="footer-item-qty" @bind-value="@Model.Quantity">
                                </div>
                            </div>
                        </div>


                        <div class="col-md-12">
                            <div class="form-group">
                                <label class="form-label mt-0 me-1" style="text-align:left;">

                                    Amount :
                                </label>
                                <div class="input-group">
                                    <input type="text" class="form-control" id="footer-item-amt" @bind-value="@Model.Amount">
                                </div>
                            </div>
                        </div>

                        @if (Model.IsSubscription)
                        {
                           @*  <div class="col-md-12">
                                <div class="form-group">
                                    <label class="form-label mt-0 me-1" style="text-align:left;">

                                        Purchase Date :
                                    </label>
                                    <div class="input-group">
                                        <input type="date" class="form-control" @bind="Model.PurchaseDate">
                                    </div>
                                </div>
                            </div> *@
                            <div class="col-md-12">
                                <div class="form-group">
                                    <label class="form-label mt-0 me-1" style="text-align:left;">
                                        Expiry Date :
                                    </label>
                                    <div class="input-group">
                                        <input type="date" class="form-control" @bind="Model.ExpiryDate">
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
                <div class="modal-footer">
                    @if (Model.ServiceID == 0)
                    {
                        <button type="submit" class="btn btn-primary">Save</button>
                        <button type="button" class="btn btn-danger" @onclick="async() => await HideCustomerCategoryModal()">Close</button>
                    }
                    else
                    {
                        <button type="submit" class="btn btn-primary">Update</button>
                        <button type="button" class="btn btn-danger" @onclick="async() => await HideCustomerCategoryModal()">Close</button>
                    }
                </div>
            </div>
        </EditForm>
    </div>
</div>




@code {
    private CustomerServiceModel Model = new();
    [Parameter] public EventCallback<IdnValuePair> Saved { get; set; }


    public async Task OpenCustomerCategoryModal(int entityID=0,int serviceID = 0)
    {
        Model = new();
        if (serviceID != 0)
        {
            Model = await API.GetAsync<CustomerServiceModel>($"customer/get-customer-service-details/{serviceID}", true);
        }
        await JS.InvokeVoidAsync("ShowModal", "customer-service-modal");
    }

    private async Task HideCustomerCategoryModal()
    {
        await JS.InvokeVoidAsync("HideModal", "customer-service-modal");
    }
    private async Task SaveCustomerCategory()
    {
        var result = await API.PostAsync<CustomerServiceSuccessModel, CustomerServiceModel>("customer/save-customer-service", Model);
        if (result is not null)
        {
            await Saved.InvokeAsync(new IdnValuePair()
                {
                    ID = result.ServiceID,
                    Value = result.ServiceName
                });
            await HideCustomerCategoryModal();
        }
    }

    #region Service Item

    private string RowItemDropdownID = "row-item-select-drop-down-";
    private string FooterItemDropdownID = "footer-item-select-drop-down";
    private DropdownSelect? FooterItemDropdownSelect;
    private DropdownSelect? RowItemDropdownSelect;
    private int currentRowIndex = -1;
    private bool isAnyRowInEditMode = false;
    private bool hasUnsavedChanges = false;

    private ModalItem modalItem = new();
    private async Task ItemSelected(DropdownItemSelectedCallbackModel data)
    {
        switch (data.DropdownMode)
        {
            case (int)DropdownModes.Item:

                await HandleItemSelectedTasks(data);
                break;
        }
    }

    private async Task AddNewItem(int mode)
    {
        switch (mode)
        {
            case (int)DropdownModes.Item:
                await modalItem.OpenItemModal();
                break;
        }
    }
    private async Task HandleItemSelectedTasks(DropdownItemSelectedCallbackModel item)
    {
        var itemDate = await API.GetAsync<ItemListModel>($@"customer/get-customer-service-item-details/{item.ID}");
      
            Model.ItemID = item.ID;
            Model.ServiceName = item.Value;
            Model.IsSubscription = itemDate.IsSubscription;
    }

    #endregion
}
