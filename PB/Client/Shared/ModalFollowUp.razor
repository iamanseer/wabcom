@using PB.Shared.Enum.Common
@using PB.Shared.Models;
@using PB.CRM.Model.Enum;
@using PB.Model.Models;
@using PB.Shared.Enum.CRM;
@using PB.Shared.Tables;

<div class="modal fade" id="new-followup-modal">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content modal-content-demo">
            <EditForm Model="Model" autocomplete="off" OnValidSubmit="Save">
                <DataAnnotationsValidator />
                <div class="modal-header">
                    <h6 class="modal-title">
                        @(Model.FollowupName + "   Follow up")
                    </h6>
                    <button type="button" aria-label="Close" class="btn-close" @onclick="async() => await CloseModal()"><span aria-hidden="true">&times;</span></button>
                </div>
                <div class="modal-body" style="@pointerEvent;">
                
                        <div class="row">
                            <div class="col-md-12">
                                <label class="me-2">
                                    User :
                                </label>
                                <label>
                                    @Model.Username
                                </label>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-12">
                                <div class="form-group">
                                    <label class="form-label mt-0 me-1">Date :</label>
                                    <input type="datetime-local" class="form-control" @bind="Model.FollowUpDate" id="followup-date-picker">
                                    <ValidationMessage For="()=>Model.FollowUpDate" />
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <DropdownSelect Label="FollowUp Status :"
                                            DropdownID="@FollowUpStatusSelect"
                                            DivClass="col-md-12"
                                            IsRequired="true"
                                            IsAddOptionNeed="true"
                                            ReadDataOnSearch="false"
                                            Mode="(int)DropdownModes.FollowupStatus"
                                            ModeGroup="(int)DropdownModes.CommonSearch"
                                            CommonSearch="@(new CommonSearchModel(){ID=Model.FollowUpType})"
                                            SelectedItem="@(new DropdownSelectedItemModel(){ID = Model.FollowUpStatusID, Value=Model.Status})"
                                            ItemSelected="ItemSelected"
                                            NewButtonClicked="AddNewFollowUpStatus"
                                            NewButtonText="Add New Status"
                                            @ref="@statusDropdownSelect" />
                                            <ValidationMessage For="()=>Model.FollowUpStatusID"/>
                        </div>
                    <div class="row">
                        <div class="col-md-12">
                            <div class="form-group">
                                <label class="form-label mt-0 me-1">Short Description</label>
                                <textarea name="" class="textarea form-control" id="enquiry-description-text-area" rows="3" @bind="Model.ShortDescription"></textarea>
                            </div>
                        </div>
                    </div>

                        @if(FollowupStatusNatureFlag)
                        {
                            <div class="row">
                                <div class="col-md-12">
                                    <div class="form-group">
                                        <label class="form-label mt-0 me-1">Next Followup Date :</label>
                                        <input type="datetime-local" class="form-control" @bind="Model.NextFollowUpDate" id="invoice-date-picker">
                                        <ValidationMessage For="() => Model.NextFollowUpDate" />
                                    </div>
                                </div>
                            </div>
                        }
                    
                       
                
                </div>

                @if (!IsViewOnly)
                {
                    <div class="modal-footer">
                        @if (Model.FollowUpID == 0)
                        {

                            <button type="submit" class="btn btn-primary">Add</button>

                            <button type="button" class="btn btn-danger" @onclick="async() => await CloseModal()">Close</button>
                        }
                        else
                        {

                            <button type="submit" class="btn btn-primary">Update</button>

                            @if (IsNeedDeleteOption)
                            {
                                <button type="button" class="btn btn-danger ms-3" @onclick="async() => await Delete()">Delete</button>
                            }

                            <button type="button" class="btn btn-secondary" @onclick="async() => await CloseModal()">Close</button>
                        }
                    </div>
                }
                else
                {
                    <div class="modal-footer">
                        <button type="button" class="btn btn-danger" @onclick="async() => await CloseModal()">Close</button>
                    </div>
                }
            </EditForm>
        </div>
    </div>
</div>

@if (Type == (int)FollowUpTypes.Enquiry)
{
    <ModalFollowUpStatus TypeID="(int)GeneralSettingsMenus.EnquiryFollowupStatus" @ref="followupStatusChildModal" Save="NewStatusAdded" />
}
else if (Type == (int)FollowUpTypes.Quotation)
{
    <ModalFollowUpStatus @ref="followupStatusChildModal" TypeID="(int)GeneralSettingsMenus.QuotationFollowStatus" Save="NewStatusAdded" />
}
else
{
    <ModalFollowUpStatus @ref="followupStatusChildModal" Save="NewStatusAdded" />
}

@code {
    [Parameter] public EventCallback Saved { get; set; }

    [Parameter] public int Type { get; set; }
    private FollowUpModel Model = new() { FollowUpType = (int)FollowUpTypes.Enquiry };

    private ModalFollowUpStatus? followupStatusChildModal;

    private DropdownSelect? statusDropdownSelect;

    private string pointerEvent = "";
    private string? errorMessage = "";
    private string FollowUpStatusSelect = "followup-drop-down-select";

    private bool IsViewOnly;
    private bool IsNeedDeleteOption = false;

    private int PreviousFollowUpID = 0;
    public bool FollowupStatusNatureFlag = true;

    #region Main Functions

    public async Task AddNewFollowUp(int Id, int followUpType, string? followUpName)
    {
        IsNeedDeleteOption = false;
        Model = new();
        Model.FollowupName = followUpName;
        Model.FollowUpType = followUpType;

        if (followUpType == (int)FollowUpTypes.Enquiry)
            Model.EnquiryID = Id;

        if (followUpType == (int)FollowUpTypes.Quotation)
            Model.QuotationID = Id;

        var result = await API.GetAsync<StringModel>("crm/get-current-username");
        Model.Username = result.Value;

        await OpenModal();
    }

    public async Task UpdateFollowUp(int followUpID, string? followUpName)
    {
        IsNeedDeleteOption = true;
        if (PreviousFollowUpID != followUpID)
        {
            Model.FollowupName = followUpName;
            PreviousFollowUpID = followUpID;
            Model = await API.GetAsync<FollowUpModel>($"crm/get-followup/{followUpID}");
        }

        await OpenModal();
    }

    private async Task OpenModal()
    {
        await JS.InvokeVoidAsync("ShowModal", "new-followup-modal");
    }

    private async Task CloseModal()
    {
        //Model = new();
        await JS.InvokeVoidAsync("HideModal", "new-followup-modal");
    }

    private async Task ItemSelected(DropdownItemSelectedCallbackModel data)
    {
        switch (data.DropdownMode)
        {
            case (int)DropdownModes.FollowupStatus:
                Model.FollowUpStatusID = data.ID;
                Model.Status = data.Value;
                if(Model.FollowUpStatusID != null)
                {
                    var natureId = await API.GetAsync<int>($"crm/get-followup-status-nature/{Model.FollowUpStatusID}");
                    if ((natureId == (int)FollowUpNatures.Dropped) || (natureId == (int)FollowUpNatures.ClosedWon))
                    {
                        FollowupStatusNatureFlag = false;
                        Model.NextFollowUpDate = DateTime.UtcNow;
                    }
                    else
                        FollowupStatusNatureFlag = true;
                }
                await FocusElement(FollowUpStatusSelect);
                break;
        }
    }

    private async Task FocusElement(string elementID)
    {
        await JS.InvokeVoidAsync("focusElement", elementID);
    }

    private async Task FocusDropdown(string dropdownID)
    {
        await JS.InvokeVoidAsync("setDropdownFocus", dropdownID, "drop-down-focused");
    }

    public async Task Save()
    {
        //if (string.IsNullOrEmpty(errorMessage))
        //{
        var res = await API.PostAsync<BaseSuccessResponse, FollowUpModel>("crm/save-followup", Model);
            if (res != null)
            {
                await Saved.InvokeAsync();
                await CloseModal();
            }
        //}
        //else
        //{
        //    RemainingTime = errorMessageDuration;
        //    _Timer.Start();
        //}
         //Model = new();
    }

    private async Task Delete()
    {
        if (await JS.Confirm("Confirm", "Are you sure you want to delete this follow up.?", SweetAlertMessageType.question, "Yes, Delete", "No, Cancel"))
        {
            if (await API.GetAsync<bool>($"crm/delete-followup/{Model.FollowUpID}"))
            {
                await Saved.InvokeAsync();
                Model = new();
                await CloseModal();
            }
        }
    }

    #endregion

    #region Modal Followup Status

    private async Task AddNewFollowUpStatus(int mode)
    {
        switch (mode)
        {
            case (int)DropdownModes.FollowupStatus:
                await followupStatusChildModal.OpenFollowUpStatusModal();
                break;
        }
    }

    private async Task NewStatusAdded(IdnValuePair status)
    {
        Model.FollowUpStatusID = status.ID;
        Model.Status = status.Value;
        await statusDropdownSelect.RefreshList();
    }

    #endregion

}
