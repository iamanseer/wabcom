@using PB.Shared.Models;
@using PB.CRM.Model.Enum;
@using PB.Model.Models;
@using PB.Shared.Models.Common;


<div class="modal fade" id="address-add-modal">
    <div class="modal-dialog modal-dialog-scrollable " role="document">
         <EditForm Model="Model" autocomplete="off" OnValidSubmit="SaveAddress">
        <div class="modal-content modal-content-demo">
           
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">NEW ADDRESS</h5>
                <h6 class="modal-title"></h6><button type="button" aria-label="Close" class="btn-close" data-bs-dismiss="modal"><span aria-hidden="true">&times;</span></button>
            </div>
                <div class="modal-body">
                

                    <div class="row">
                        <div class="form-group col-md-12">
                            <label class="form-label" style="text-align: left; margin-top: 0 !important;">
                                Address Type :
                                <span style="color:red">*</span>
                            </label>
                            <select class="form-control form-select" id="address-type-select" @bind="Model.AddressType">
                                <option value="0" selected>Choose</option>
                                <option value="@((int)AddressTypes.Home)">Home</option>
                                <option value="@((int)AddressTypes.Office)">Office</option>
                                <option value="@((int)AddressTypes.Billing)">Billing</option>
                                <option value="@((int)AddressTypes.Shipping)">Shipping</option>
                                <option value="@((int)AddressTypes.Other)">Other</option>
                            </select>    
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-12">
                            <div class="form-group">
                                <label class="form-label mt-0" style="text-align: left; margin-top: 0 !important;">
                                    Address Line 1 :
                                    <span style="color:red">*</span>
                                </label>
                                <textarea class="textarea form-control" id="address-line-1-text-area" rows="2" @bind="Model.AddressLine1"></textarea>
                                <ValidationMessage For="() => Model.AddressLine1" />
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-12">
                            <div class="form-group">
                                <label class="form-label mt-0" style="text-align: left; margin-top: 0 !important;">
                                    Address Line 2 :
                                    <span style="color:red">*</span>
                                </label>
                                <textarea class="textarea form-control" id="address-line-2-text-area" rows="2" @bind="Model.AddressLine2"></textarea>
                                <ValidationMessage For="() => Model.AddressLine2" />
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-12">
                            <div class="form-group">
                                <label class="form-label mt-0" style="text-align: left; margin-top: 0 !important;">
                                    Address Line 3 :
                                </label>
                                <textarea class="textarea form-control" id="address-line-3-text-area" rows="2" @bind="Model.AddressLine3"></textarea>
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <InputTextBox Label="Pincode : "
                                      ValidationFor="() => Model.Pincode"
                                      DivClass="col-md-12"
                                      @bind-Value="Model.Pincode"
                                      id="pincode-input-box" />

                    </div>

                    <div class="row">
                        <!--COUNTRY-->
                        <DropdownSelect DivClass="col-md-12"
                                        DropdownID="@CountryDropdownID"
                                        Label="Country :"
                                        Mode="(int)DropdownModes.Country"
                                        ModeGroup="(int)DropdownModes.CommonSearch"
                                        ItemSelected="ItemSelected"
                                        IsRequired="true"
                                        ReadDataOnSearch="true"
                                        SelectedItem="@(new DropdownSelectedItemModel(){ID=Model.CountryID,Value=Model.CountryName})"
                                        />

                    </div>

                    <div class="row" style="@StatePointerEvent">
                        <!--STATE-->
                        <DropdownSelect DivClass="col-md-12"
                                        DropdownID="@StateDropdownID"
                                        Label="State : "
                                        PlaceHolder="Select State"
                                        ReadDataOnSearch="true"
                                        Mode="(int)DropdownModes.State"
                                        ModeGroup="(int)DropdownModes.CommonSearch"
                                        ItemSelected="ItemSelected"
                                        CommonSearch="@(new CommonSearchModel(){ID=Convert.ToInt32(Model.CountryID)})"
                                        SelectedItem="@(new DropdownSelectedItemModel(){ID=Model.StateID,Value=Model.State})"
                                        IsAddOptionNeed="true"
                                        NewButtonText="Add New State"
                                        @ref="stateDropdown" 
                                        />


                    </div>
@*
                    <div class="row" style="@CityPointerEvent">
                        <!--City-->
                        <DropdownSelect DivClass="col-md-12"
                                        DropdownID="@CityDropdownID"
                                        Label="Business Location : "
                                        IsAddOptionNeed="true"
                                        ReadDataOnSearch="true"
                                        Mode="(int)DropdownModes.City"
                                        ModeGroup="(int)DropdownModes.CommonSearch"
                                        ItemSelected="ItemSelected"
                                        @ref="stateDropdown"
                                        CommonSearch="@(new CommonSearchModel(){ID=Convert.ToInt32(Model.StateID)})"
                                        SelectedItem="@(new IdnValuePair(){ID=Convert.ToInt32(Model.CityID),Value=Model.City})" />

                    </div>*@

                   


                    <div class="alert alert-danger py-1 error-message-div-modal d-none" role="alert" id="divError-3">
                        <!--Bad Request errors wil display here-->
                    </div>
                    <FormValidator DivClass="error-message-div-modal" @ref="formValidator" />
               
            </div>
            <div class="modal-footer">
                @if (Model.AddressID == 0)
                {
                    <button class="btn btn-primary" type="submit" >Add Address</button> @*@onclick="async () => await SaveAddress()"*@
                    <button class="btn btn-danger" type="button" @onclick="async () => await CloseModal()">Close</button>
                }
                else
                {
                        <button class="btn btn-primary" type="submit">Update Address</button>  @*@onclick="async () => await SaveAddress()"*@
                    <button class="btn btn-danger" type="button" @onclick="async () => await CloseModal()">Close</button>
                }
            </div>
            
        </div>
           
        </EditForm>
    </div>
</div>

@code {

    [Parameter] public EventCallback<AddressModel> CallbackWithModel { get; set; }
    [Parameter] public EventCallback<IdnValuePair> CallbackIDnValue { get; set; }
    [Parameter] public int? EntityID { get; set; }

    private AddressModel Model = new();
    private DropdownSelect? stateDropdown;
    private FormValidator? formValidator;

    private bool IsNeedModelCallback = false;

    private string CountryDropdownID = "country-drop-down-select";
    private string StateDropdownID = "state-drop-down-select";
    private string CityDropdownID = "city-drop-down-select";

    private string? errorMessage = null;
    private string? pointerEvent;

    private string? StatePointerEvent = "pointer-events:none";
    private string? CityPointerEvent = "pointer-events:none";

    #region Modal Related Functions

    public async Task AddNewAddress(int addressType = 0, bool isNeedModelCallback = false)
    {
        StatePointerEvent = "pointer-events:none";
        CityPointerEvent = "pointer-events:none";

        IsNeedModelCallback = isNeedModelCallback;

        Model = new();
        Model.AddressType = addressType;
        await OpenModal();

    }

    public async Task UpdateAddress(AddressModel address)
    {
        Model = address;
        StatePointerEvent = "";
        CityPointerEvent = "";
        await OpenModal();
    }

    private async Task CloseModal()
    {
        await JS.InvokeVoidAsync("HideModal", "address-add-modal");
    }

    private async Task OpenModal()
    {
        await JS.InvokeVoidAsync("ShowModal", "address-add-modal");
    }

    #endregion

    #region Main Functions

    public async Task SaveAddress()
    {
        if (await formValidator.ValidateModel(Model))
        {
            Model.EntityID = EntityID;
            var res = await API.PostAsync<AddressAddResultModel, AddressModel>("customer/save-customer-address", Model);
            if (res != null)
            {
                Model.AddressID = res.AddressID;
                if (IsNeedModelCallback)
                {
                    await CallbackWithModel.InvokeAsync(Model);
                }
                else
                {
                    await CallbackIDnValue.InvokeAsync(new IdnValuePair() { ID = Model.AddressID, Value = "" });
                }
                await CloseModal();
            }
        }
    }

    #endregion

    #region Dropdown related function

    private async Task ItemSelected(DropdownItemSelectedCallbackModel data)
    {
        switch (data.DropdownMode)
        {
            case (int)DropdownModes.Country:

                Model.CountryID = data.ID;
                Model.CountryName = data.Value;
                StatePointerEvent = "";
                await stateDropdown.RefreshList(data.ID);
                await FocusDropdown(StateDropdownID);
                
                break;

            case (int)DropdownModes.State:

                Model.StateID = data.ID;
                Model.State = data.Value;

                break;
        }
    }

    #endregion

    #region Focus Function

    private async Task FocusElement(string elementID)
    {
        await JS.InvokeVoidAsync("focusElement", elementID);
    }

    private async Task FocusDropdown(string dropdownID)
    {
        await JS.InvokeVoidAsync("setDropdownFocus", dropdownID, "drop-down-focused");
    }

    #endregion

}