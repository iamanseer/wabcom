@using PB.CRM.Model.Enum
@using PB.Model.Models
@using PB.Shared.Models.Common

<!--Address Modal-->
<div class="modal fade" id="address-add-modal">
    <div class="modal-dialog modal-dialog-scrollable modal-body-scroll" style="overflow-y: scroll;">
        <EditForm Model="Model" OnValidSubmit="SaveCustomerAddress">
            <DataAnnotationsValidator />
            <div class="modal-content modal-content-demo">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">NEW ADDRESS</h5>
                    <h6 class="modal-title"></h6><button type="button" aria-label="Close" class="btn-close" @onclick="async () => await CloseAddressModal()"><span aria-hidden="true">&times;</span></button>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="form-group col-md-12">
                            <label class="form-label" style="text-align: left; margin-top: 0 !important;">
                                Address Type :
                            </label>
                            <select class="form-control form-select" id="address-type-select" @bind="Model.AddressType">
                                <option value="0" selected>Choose</option>
                                <option value="@((int)AddressTypes.Home)">Home</option>
                                <option value="@((int)AddressTypes.Office)">Office</option>
                                <option value="@((int)AddressTypes.Billing)">Billing</option>
                                <option value="@((int)AddressTypes.Shipping)">Shipping</option>
                                <option value="@((int)AddressTypes.Other)">Other</option>
                            </select>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-12">
                            <div class="form-group">
                                <label class="form-label mt-0" style="text-align: left; margin-top: 0 !important;">
                                    Address Line 1 :
                                    <span style="color:red">*</span>
                                </label>
                                <textarea class="textarea form-control" id="address-line-1-text-area" rows="2" @bind="Model.AddressLine1"></textarea>
                                <ValidationMessage For="() => Model.AddressLine1" />
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-12">
                            <div class="form-group">
                                <label class="form-label mt-0" style="text-align: left; margin-top: 0 !important;">
                                    Address Line 2 :
                                </label>
                                <textarea class="textarea form-control" id="address-line-2-text-area" rows="2" @bind="Model.AddressLine2"></textarea>
                                <ValidationMessage For="() => Model.AddressLine2" />
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-12">
                            <div class="form-group">
                                <label class="form-label mt-0" style="text-align: left; margin-top: 0 !important;">
                                    Address Line 3 :
                                </label>
                                <textarea class="textarea form-control" id="address-line-3-text-area" rows="2" @bind="Model.AddressLine3"></textarea>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <InputTextBox Label="Pincode : " @bind-Value="Model.Pincode"
                                      ValidationFor="() => Model.Pincode"
                                      DivClass="col-md-12" id="pincode-input-box" />

                    </div>
                    <div class="row">
                        <!--COUNTRY-->
                        <DropdownSelect DivClass="col-md-12"
                                        DropdownID="@CountryDropdownID"
                                        Label="Country :"
                                        Mode="(int)DropdownModes.Country"
                                        ModeGroup="(int)DropdownModes.CommonSearch"
                                        ItemSelected="HandleAddressCountrySelected"
                                        IsRequired="true"
                                        ReadDataOnSearch="true"
                                        SelectedItem="@(new DropdownSelectedItemModel(){ID=Model.CountryID,Value=Model.CountryName})" />

                    </div>
                    <div class="row" style="@StatePointerEvent">
                        <!--STATE-->
                        <DropdownSelect DivClass="col-md-12" @ref="AddressStateDropdown"
                                        DropdownID="@StateDropdownID"
                                        Label="State : "
                                        ReadDataOnSearch="true"
                                        Mode="(int)DropdownModes.State"
                                        CommonSearch="@(new CommonSearchModel(){ID = Convert.ToInt32(Model.CountryID)})"
                                        ModeGroup="(int)DropdownModes.CommonSearchWithID"
                                        ItemSelected="HandleAddressStateSelected"
                                        SelectedItem="@(new DropdownSelectedItemModel(){ID=Model.StateID,Value=Model.State})"
                                        IsAddOptionNeed="false"
                                        NewButtonText="Add New State" />

                    </div>
                    <div class="row" style="@StatePointerEvent">
                        <!--CITY-->
                        <DropdownSelect DivClass="col-md-12" @ref="AddressCityDropdown"
                                        DropdownID="@CityDropdownID"
                                        Label="City : "
                                        ReadDataOnSearch="true"
                                        Mode="(int)DropdownModes.City"
                                        ModeGroup="(int)DropdownModes.CommonSearchWithID"
                                        ItemSelected="HandleAddressCitySelected"
                                        CommonSearch="@(new CommonSearchModel(){ID = Convert.ToInt32(Model.StateID)})"
                                        SelectedItem="@(new DropdownSelectedItemModel(){ID=Model.CityID,Value=Model.City})"
                                        IsAddOptionNeed="false"
                                        NewButtonText="Add New City" />
                    </div>
                </div>
                <div class="modal-footer">
                    @if (Model.AddressID == 0)
                    {
                        <button class="btn btn-primary" type="submit">Add Address</button>
                        <button class="btn btn-danger" type="button" @onclick="async () => await CloseAddressModal()">Close</button>
                    }
                    else
                    {
                        <button class="btn btn-primary" type="submit">Update Address</button>
                        <button class="btn btn-danger" type="button" @onclick="async () => await CloseAddressModal()">Close</button>
                    }
                </div>

            </div>
        </EditForm>
    </div>
</div>

@code {
    [Parameter] public EventCallback<IdnValuePair> Saved { get; set; }
    [Parameter] public EventCallback<int> Deleted { get; set; }
    private AddressModel Model = new();

    private DropdownSelect AddressStateDropdown = new();
    private DropdownSelect AddressCityDropdown = new();

    private string? StatePointerEvent = "pointer-events:none";
    private string? CityPointerEvent = "pointer-events:none";
    private string CountryDropdownID = "address-country-drop-down-select";
    private string StateDropdownID = "address-state-drop-down-select";
    private string CityDropdownID = "address-city-drop-down-select";

    private int EntityID = 0;

    public async Task OpenEntityAddressModal(int entityID, int addrressID = 0)
    {
        Model = new() { EntityID = entityID };
        if (addrressID > 0)
            Model = await API.GetAsync<AddressModel>($"common/get-entity-address/{addrressID}", true);
        await JS.InvokeVoidAsync("ShowModal", "address-add-modal");
    }
    private async Task SaveCustomerAddress()
    {
        var res = await API.PostAsync<AddressAddResultModel, AddressModel>("common/save-entity-address", Model);
        if (res != null)
        {
            await Saved.InvokeAsync(new IdnValuePair() { ID = res.AddressID, Value = res.CompleteAddress });
            await CloseAddressModal();
        }
    }
    public async Task DeleteAddress(int addressID)
    {
        if (await JS.Confirm("Cofirm", "Are you sure you want to remove this address", SweetAlertMessageType.question, "Yes, Remove", "No, Don't Remove"))
        {
            await Deleted.InvokeAsync(addressID);
        }
    }
    private async Task HandleAddressCountrySelected(DropdownItemSelectedCallbackModel data)
    {
        Model.CountryID = data.ID;
        Model.CountryName = data.Value;
        StatePointerEvent = "";
        Model.StateID = null;
        Model.State = null;
        Model.CityID = null;
        Model.City = null;
        if (Model.CountryID != null)
        {
            await AddressStateDropdown.RefreshList(Model.CountryID);
        }
    }
    private async Task HandleAddressStateSelected(DropdownItemSelectedCallbackModel data)
    {
        Model.StateID = data.ID;
        Model.State = data.Value;
        Model.CityID = null;
        Model.City = null;
        if (Model.StateID != null)
        {
            await AddressCityDropdown.RefreshList(Model.StateID);
            CityPointerEvent = "";
        }
    }
    private void HandleAddressCitySelected(DropdownItemSelectedCallbackModel data)
    {
        Model.CityID = data.ID;
        Model.City = data.Value;
    }
    private async Task CloseAddressModal()
    {
        await JS.InvokeVoidAsync("HideModal", "address-add-modal");
        StatePointerEvent = CityPointerEvent = "pointer-events:none";
    }
}
