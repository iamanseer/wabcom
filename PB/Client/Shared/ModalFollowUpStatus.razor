@using PB.Shared.Models;
@using PB.CRM.Model.Enum;
@using PB.Model.Models;
@using PB.Shared.Enum.CRM;
@using PB.Shared.Models.CRM;
@using System.ComponentModel.DataAnnotations;
@using PB.Shared.Models.Common;
@using PB.Shared.Tables.CRM;

<div class="modal fade" id="new-followup-status-modal">

    <EditForm Model="Model" autocomplete="off" OnValidSubmit="SaveFollowupStatus">
        <DataAnnotationsValidator />
        <div class="modal-dialog modal-dialog-scrollable" role="document">
            <div class="modal-content modal-content-demo">
                <div class="modal-header">
                    <h6 class="modal-title">
                        <strong>FollowUp Status</strong>
                    </h6>
                    <button type="button" aria-label="Close" class="btn-close" @onclick="async() => await CloseModal()">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">


                    <div class="row">
                        <InputTextBox Label="@Localizer["Status Name"]" DivClass="col-md-12" ValidationFor="() => Model.StatusName" @bind-Value="Model.StatusName" />

                      @*   <div class="form-group col-md-12">
                            <label class="form-label" style="text-align: left; margin-top: 0 !important;">
                                @Localizer["Type"] :
                                <span style="color:red">*</span>
                            </label>
                            <select class="form-control form-select" id="address-type-select" @bind="Model.Type">
                                <option value="0" selected>Choose</option>
                                <option value="@((int)FollowUpTypes.Enquiry)">Enquiry</option>
                                <option value="@((int)FollowUpTypes.Quotation)">Quotation</option>
                            </select>
                            <ValidationMessage For="() => Model.Type" />
                        </div> *@

                        <div class="form-group col-md-12">
                            <label class="form-label" style="text-align: left; margin-top: 0 !important;">
                                @Localizer["Nature"] :
                                <span style="color:red">*</span>
                            </label>
                            <select class="form-control form-select" id="address-type-select" @bind="Model.Nature">
                                <option value="0" selected>Choose</option>
                                <option value="@((int)FollowUpNatures.Followup)">FollowUp</option>
                                <option value="@((int)FollowUpNatures.ClosedWon)">Interested</option>
                                <option value="@((int)FollowUpNatures.Dropped)">Dropped</option>
                                <option value="@((int)FollowUpNatures.ClosedWon)">Closed won</option>
                            </select>
                            <ValidationMessage For="() => Model.Nature" />
                        </div>

                    </div>
                </div>
                <div class="modal-footer">
                    <button type="submit" class="btn btn-primary">@(Model.FollowUpStatusID == 0 ? "Save" : "Update")</button>
                    <button type="button" class="btn btn-danger" @onclick="async() => await CloseModal()">Close</button>
                </div>
            </div>
        </div>
    </EditForm>
</div>


@code {

    [Parameter] public EventCallback<IdnValuePair> Save { get; set; }
    [Parameter] public int TypeID{ get; set; }
    private FollowupStatus Model = new();

    public async Task OpenFollowUpStatusModal(int followUpStatusID = 0)
    {
        if (followUpStatusID != 0)
            Model = await API.GetAsync<FollowupStatus>($"crm/get-followup-status/{followUpStatusID}", true);
        await OpenModal();
    }
    private async Task SaveFollowupStatus()
    {
        Model.Type = TypeID;
        var res = await API.PostAsync<FollowupStatusAddResultModel, FollowupStatus>("crm/save-followup-status", Model);
        if (res != null)
        {
            await Save.InvokeAsync(new IdnValuePair()
                {
                    ID = res.FollowUpStatusID,
                    Value = res.StatusName
                });
            await CloseModal();
        }
    }
    private async Task CloseModal()
    {
        Model = new();
        await JS.InvokeVoidAsync("HideModal", "new-followup-status-modal");
    }
    private async Task OpenModal()
    {
        await JS.InvokeVoidAsync("ShowModal", "new-followup-status-modal");
    }
}
