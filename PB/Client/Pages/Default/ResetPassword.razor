@page "/reset-password"
@using Blazored.LocalStorage
@inject ILocalStorageService _localStorage

<LoginLayout>
    <div class="">

        <!-- CONTAINER OPEN -->
        <div class="col col-login mx-auto">
            <div class="text-center">
                <img src="/assets/images/brand/white.png" class="header-brand-img m-0" alt="">
            </div>
        </div>
        <div class="container-login100">
            <div class="wrap-login100 p-6">
                <EditForm Model="Model" OnValidSubmit="ResetPswd" class="login100-form validate-form">
                    <DataAnnotationsValidator />
                    <span class="login100-form-title pb-5">
                        Setup new password
                    </span>
                    <div class="wrap-input100 validate-input input-group" id="Password-toggle">
                        <a class="input-group-text bg-white text-muted" @onclick="() => HandleShowOrHidePassword(1)">
                            <i class="zmdi zmdi-eye text-muted" aria-hidden="true"></i>
                        </a>
                        <input class="input100 border-start-0 form-control ms-0" type="@(showNewPassword ? "text" : "password")" placeholder="@Localizer["Password"]" @bind="Model.Password">
                    </div>
                    <div class="form-control-validation">
                        <ValidationMessage For="@(() => Model.Password)" />
                    </div>
                    <div class="wrap-input100 validate-input input-group" id="Password-toggle">
                        <a class="input-group-text bg-white text-muted" @onclick="() => HandleShowOrHidePassword(2)">
                            <i class="zmdi zmdi-eye text-muted" aria-hidden="true"></i>
                        </a>
                        <input class="input100 border-start-0 form-control ms-0" type="@(showConfirmPassword ? "text" : "password")" placeholder="@Localizer["Repeat your password"]" @bind="Model.ConfirmPassword">
                    </div>
                    <div class="form-control-validation">
                        <ValidationMessage For="@(() => Model.ConfirmPassword)" />
                    </div>
                    <div class="submit">
                        <button class="btn w-100 btn-primary d-grid" type="submit">Submit</button>
                    </div>

                </EditForm>
            </div>
        </div>
    </div>
   
</LoginLayout>

@code {
    private ResetPasswordModel Model = new();

    protected override async Task OnInitializedAsync()
    {
        Model.EmailAddress = await _localStorage.GetItemAsync<string>("username");
        //Model.UserID = await API.PostAsync<int, StringModel>($"auth/get-user", new StringModel() { Value = Model.EmailAddress });
        Model.OTP = "0";
    }

    private async Task ResetPswd()
    {

        var result = await API.PostAsync<BaseSuccessResponse, ResetPasswordModel>("auth/reset-password", Model);
        if (result != null)
        {
            await JS.SuccessMessage(result.ResponseMessage, result.ResponseTitle);
            Nav.NavigateTo("login");
        }
    }

    #region Show or Hide Password

    private bool showNewPassword = false;
    private bool showConfirmPassword = false;
    private void HandleShowOrHidePassword(int type)
    {
        switch (type)
        {
            //New Password
            case 1:
                showNewPassword = !showNewPassword;
                break;

            //Confirm Password
            case 2:
                showConfirmPassword = !showConfirmPassword;
                break;
        }
    }

    #endregion
}
