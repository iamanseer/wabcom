@page "/quotation"
@page "/quotation/{QuotationID:int}"
@page "/quotation/{QuotationID:int}/{EnquiryID:int}"

@using PB.CRM.Model.Enum;
@using PB.Client.Shared.Common
@using PB.Client.Shared.Inventory.Customer
@using PB.Client.Shared.Inventory.Item
@using PB.Model.Models;
@using PB.Shared.Models.CRM;
@using PB.Shared.Models.CRM.Customer;
@using PB.Shared.Models.CRM.Quotation;
@using PB.Shared.Models.Common;
@using System.ComponentModel.DataAnnotations;
@using PB.Shared.Models.Inventory.Item;
@using PB.Shared.Tables.CRM;

@attribute [Authorize(Roles = "Quotation")]

<PageLayoutNew>
    <EditForm Model="Model" OnValidSubmit="async () => await SaveQuotation()">    @*  OnInvalidSubmit="ShowErrorMessage" *@
        <DataAnnotationsValidator />
        <div class="main-container container-fluid">
            <div class="row page-header ">

                <!--Quotation Card-->
                <div class="col-12">
                    <div class="card">
                        <div class="card-header">
                            <h5 style="margin-bottom: 0 !important;">Quotation Details</h5>
                        </div>
                        <div class="card-body">

                            <!--Customer Dropdown-->
                            @if (Model.CustomerEntityID == null)
                            {
                                <div class="row">
                                    <DropdownSelect @ref="@CustomerDropdown"
                                                    DropdownID="@QuotationCustomerSelectID"
                                                    DivClass="col-md-7"
                                                    Label="Customer :"
                                                    IsRequired="true"
                                                    ReadDataOnSearch="true"
                                                    IsAddOptionNeed="true"
                                                    Mode="(int)DropdownModes.Customer"
                                                    RoleName="Customer"
                                                    ModeGroup="(int)DropdownModes.CommonSearch"
                                                    SelectedItem="@(new DropdownSelectedItemModel(){ID = Model.CustomerEntityID, Value=Model.CustomerName})"
                                                    ItemSelected="async (DropdownItemSelectedCallbackModel customer) => await HandleCustomerSelected(customer)"
                                                    NewButtonClicked="async (int dropdownMode) => await HandelAddNewCustomerButtonClick(dropdownMode)"
                                                    NewButtonText="Add New Customer" />
                                    <ValidationMessage For="() => Model.CustomerEntityID" />
                                </div>
                            }
                            else
                            {
                                <div class="row">
                                    <div class="col-md-7">
                                        <div class="form-group">
                                            <label class="form-label mt-0 me-1">
                                                Customer :
                                                <span class="ms-1" style="color:red">*</span>
                                            </label>
                                            <div class="input-group">
                                                <DropdownSelect @ref="@CustomerDropdown"
                                                                DropdownID="@QuotationCustomerSelectID"
                                                                DivClass="col-md-11 px-0"
                                                                IsRequired="true"
                                                                ReadDataOnSearch="true"
                                                                IsAddOptionNeed="true"
                                                                RoleName="Customer"
                                                                Mode="(int)DropdownModes.Customer"
                                                                ModeGroup="(int)DropdownModes.CommonSearch"
                                                                SelectedItem="@(new DropdownSelectedItemModel(){ID = Model.CustomerEntityID, Value=Model.CustomerName})"
                                                                ItemSelected="async (DropdownItemSelectedCallbackModel customer) => await HandleCustomerSelected(customer)"
                                                                NewButtonClicked="async (int dropdownMode) => await HandelAddNewCustomerButtonClick(dropdownMode)"
                                                                NewButtonText="Add New Customer" />
                                                <div class="col-md-1 px-0">
                                                    <button class="btn btn-light" type="button" id="button-addon2" @onclick="async () => await HandleCustomerUpdateButtonClick(Model.CustomerEntityID.Value)">
                                                        <i class="fa fa-pencil"></i>
                                                    </button>
                                                </div>
                                            </div>
                                            <ValidationMessage For="() => Model.CustomerEntityID" />
                                        </div>
                                    </div>
                                </div>

                                <!--Tax Number-->
                                @if (!string.IsNullOrEmpty(Model.TaxNumber))
                                {
                                    <div class="row">
                                        <label class="col-auto item-label  text-muted">
                                            TaxNumber
                                        </label>
                                        <label class="col-7 item-label col-auto">
                                            @Model.TaxNumber
                                        </label>
                                    </div>
                                }

                                <!--Customer Address-->
                                <div class="row col-md-12 mb-3">
                                    <!--Billing Address-->
                                    <div class="col-md-5 border">
                                        @if (IsBillingAddressSelected)
                                        {
                                            @if (!string.IsNullOrEmpty(SelectedBillingAddress.CompleteAddress))
                                            {
                                                var addressLines = SelectedBillingAddress.CompleteAddress.Split(',');
                                                <div class="list-group">
                                                    <div class="row">
                                                        <div>
                                                            <label>BILLING ADDRESS :</label>
                                                        </div>
                                                        <a class="list-group-item list-group-item-action mt-2 d-flex justify-content-between active">
                                                            <div class="address-content">
                                                                @foreach (var line in addressLines.Select((ln, i) => new { ln, i }))
                                                                {
                                                                    <span>
                                                                        @(line.ln)
                                                                        @(line.i != (addressLines.Length - 1) ? "," : "")
                                                                    </span> <br>
                                                                }
                                                            </div>
                                                            <div class="action d-flex flex-column">
                                                                <i class="fa fa-check-circle fs-5 text-success ms-auto"></i>
                                                                <span class="mt-auto text-primary" style="cursor:pointer;" @onclick="async () => await EditCustomerAddress(SelectedBillingAddress)"> Edit </span>
                                                            </div>
                                                        </a>
                                                    </div>
                                                    <div class="row mt-2">
                                                        <div class="col-md-12">
                                                            <button type="button" class="btn p-1 border" style="color:var(--primary-bg-color)" @onclick="() => HandleCustomerAddressChangeClicked()">
                                                                <i class="fa fa-exchange me-1"></i>
                                                                <span>Change address</span>
                                                            </button>
                                                        </div>
                                                    </div>
                                                </div>
                                            }
                                        }
                                        else
                                        {
                                            @if (CustomerData.CustomerAddresses.Count > 0)
                                            {
                                                <div class="list-group">
                                                    <div class="row">
                                                        <div class="mb-1">
                                                            <label>Select Address:</label>
                                                        </div>
                                                        <div style="max-height:300px;overflow-y:auto">
                                                            @foreach (var billingAddress in CustomerData.CustomerAddresses)
                                                            {
                                                                @if (!string.IsNullOrEmpty(billingAddress.CompleteAddress))
                                                                {
                                                                    var addressLines = billingAddress.CompleteAddress.Split(',');
                                                                    if (Model.BillingAddressID == billingAddress.AddressID)
                                                                    {
                                                                        <a class="list-group-item list-group-item-action mt-2 d-flex justify-content-between active" @onclick="() => HandleCustomerAddressSelected(billingAddress, true)">
                                                                            <div class="address-content">
                                                                                @foreach (var line in addressLines.Select((ln, i) => new { ln, i }))
                                                                                {
                                                                                    <span>
                                                                                        @(line.ln)
                                                                                        @(line.i != (addressLines.Length - 1) ? "," : "")
                                                                                    </span> <br>
                                                                                }
                                                                            </div>
                                                                            <div class="action d-flex flex-column">
                                                                                <i class="fa fa-check-circle fs-5 text-success ms-auto"></i>
                                                                                <span class="mt-auto text-primary" style="cursor: pointer;" @onclick="async () => await EditCustomerAddress(billingAddress)"> Edit </span>
                                                                            </div>
                                                                        </a>
                                                                    }
                                                                    else
                                                                    {
                                                                        <a class="list-group-item list-group-item-action mt-2 d-flex justify-content-between" @onclick="() => HandleCustomerAddressSelected(billingAddress, true)">
                                                                            <div class="address-content">
                                                                                @foreach (var line in addressLines.Select((ln, i) => new { ln, i }))
                                                                                {
                                                                                    <span>
                                                                                        @(line.ln)
                                                                                        @(line.i != (addressLines.Length - 1) ? "," : "")
                                                                                    </span> <br>
                                                                                }
                                                                            </div>
                                                                            <div class="action d-flex flex-column">
                                                                                <span class="mt-auto text-primary" style="cursor: pointer;" @onclick="async () => await EditCustomerAddress(billingAddress)"> Edit </span>
                                                                            </div>
                                                                        </a>
                                                                    }
                                                                }
                                                            }
                                                        </div>
                                                    </div>
                                                    <div class="row">
                                                        <div class="col-md-12 mt-2">
                                                            <button type="button" class="btn p-1 border" style="color:var(--primary-bg-color)" @onclick="async () => await AddNewCustomerAddress((int)AddressTypes.Billing)">
                                                                <i class="fe fe-plus me-2"></i>
                                                                <span>Add new address</span>
                                                            </button>
                                                        </div>
                                                    </div>
                                                </div>
                                            }
                                            else
                                            {
                                                <div class="row">
                                                    <div class="col-md-12 mt-2">
                                                        <button type="button" class="btn p-1 border" style="color:var(--primary-bg-color)" @onclick="async () => await AddNewCustomerAddress((int)AddressTypes.Billing)">
                                                            <i class="fe fe-plus me-2"></i>
                                                            <span>Add new address</span>
                                                        </button>
                                                    </div>
                                                </div>
                                            }
                                            <div class="row">
                                                <ValidationMessage For="()=> Model.BillingAddressID" />
                                            </div>
                                        }
                                    </div>

                                    <!--Shipping Address-->
                                    @if (Model.NeedShippingAddress)
                                    {
                                        <div class="col-md-5 ms-2 border">
                                            @if (IsShippingAddressSelected)
                                            {
                                                @if (!string.IsNullOrEmpty(SelectedShippingAddress.CompleteAddress))
                                                {
                                                    var addressLines = SelectedShippingAddress.CompleteAddress.Split(',');
                                                    <div class="list-group">
                                                        <div class="row">
                                                            <div>
                                                                <label>SHIPPING ADDRESS :</label>
                                                            </div>
                                                            <a class="list-group-item list-group-item-action mt-2 d-flex justify-content-between active">
                                                                <div class="address-content">
                                                                    @foreach (var line in addressLines.Select((ln, i) => new { ln, i }))
                                                                    {
                                                                        <span>
                                                                            @(line.ln)
                                                                            @(line.i != (addressLines.Length - 1) ? "," : "")
                                                                        </span> <br>
                                                                    }
                                                                </div>
                                                                <div class="action d-flex flex-column">
                                                                    <i class="fa fa-check-circle fs-5 text-success ms-auto"></i>
                                                                    <span class="mt-auto text-primary" style="cursor: pointer;" @onclick="async () => await EditCustomerAddress(SelectedShippingAddress)"> Edit </span>
                                                                </div>
                                                            </a>
                                                        </div>
                                                        <div class="row mt-2">
                                                            <div class="col-md-12">
                                                                <button type="button" class="btn p-1 border" style="color:var(--primary-bg-color)" @onclick="() => HandleCustomerAddressChangeClicked(false)">
                                                                    <i class="fa fa-exchange me-1"></i>
                                                                    <span>Change address</span>
                                                                </button>
                                                            </div>
                                                        </div>
                                                    </div>

                                                }
                                            }
                                            else
                                            {
                                                @if (CustomerData.CustomerAddresses.Count > 0)
                                                {
                                                    <div class="list-group">
                                                        <div class="row">
                                                            <div class="mb-1">
                                                                <label>Select Address:</label>
                                                            </div>
                                                            <div style="max-height:300px;overflow-y:auto">
                                                                @foreach (var shippingAddress in CustomerData.CustomerAddresses)
                                                                {
                                                                    @if (!string.IsNullOrEmpty(shippingAddress.CompleteAddress))
                                                                    {
                                                                        var addressLines = shippingAddress.CompleteAddress.Split(',');
                                                                        if (Model.ShippingAddressID == shippingAddress.AddressID)
                                                                        {
                                                                            <a class="list-group-item list-group-item-action mt-2 d-flex justify-content-between active" @onclick="() => HandleCustomerAddressSelected(shippingAddress, false)">
                                                                                <div class="address-content">
                                                                                    @foreach (var line in addressLines.Select((ln, i) => new { ln, i }))
                                                                                    {
                                                                                        <span>
                                                                                            @(line.ln)
                                                                                            @(line.i != (addressLines.Length - 1) ? "," : "")
                                                                                        </span> <br>
                                                                                    }
                                                                                </div>
                                                                                <div class="action d-flex flex-column">
                                                                                    <i class="fa fa-check-circle fs-5 text-success ms-auto"></i>
                                                                                    <span class="mt-auto text-primary" style="cursor: pointer;" @onclick="async () => await EditCustomerAddress(shippingAddress)"> Edit </span>
                                                                                </div>
                                                                            </a>
                                                                        }
                                                                        else
                                                                        {
                                                                            <a class="list-group-item list-group-item-action mt-2 d-flex justify-content-between" @onclick="() => HandleCustomerAddressSelected(shippingAddress, false)">
                                                                                <div class="address-content">
                                                                                    @foreach (var line in addressLines.Select((ln, i) => new { ln, i }))
                                                                                    {
                                                                                        <span>
                                                                                            @(line.ln)
                                                                                            @(line.i != (addressLines.Length - 1) ? "," : "")
                                                                                        </span> <br>
                                                                                    }
                                                                                </div>
                                                                                <div class="action d-flex flex-column">
                                                                                    <span class="mt-auto text-primary" style="cursor: pointer;" @onclick="async () => await EditCustomerAddress(shippingAddress)"> Edit </span>
                                                                                </div>
                                                                            </a>
                                                                        }
                                                                    }
                                                                }
                                                            </div>
                                                        </div>
                                                        <div class="row">
                                                            <div class="col-md-12 mt-2">
                                                                <button type="button" class="btn p-1 border" style="color:var(--primary-bg-color)" @onclick="async () => await AddNewCustomerAddress((int)AddressTypes.Shipping)">
                                                                    <i class="fe fe-plus me-2"></i>
                                                                    <span>Add new address</span>
                                                                </button>
                                                            </div>
                                                        </div>
                                                    </div>
                                                }
                                                else
                                                {
                                                    <div class="row">
                                                        <div class="col-md-12 mt-2">
                                                            <button type="button" class="btn p-1 border" style="color:var(--primary-bg-color)" @onclick="async () => await AddNewCustomerAddress((int)AddressTypes.Shipping)">
                                                                <i class="fe fe-plus me-2"></i>
                                                                <span>Add new address</span>
                                                            </button>
                                                        </div>
                                                    </div>
                                                }
                                                <div class="row">
                                                    <ValidationMessage For="()=> Model.ShippingAddressID" />
                                                </div>
                                            }
                                        </div>
                                    }
                                </div>

                                <div class="row">
                                    <div class="col-md-12">
                                        <div class="my-4">
                                            <div class=" form-check form-check-inline font-large">
                                                <input id="item-model-check" class="ember-checkbox ember-view form-check-input" type="checkbox" @onchange="(ChangeEventArgs e) => HandleNeedShippingAddrssChecked(e)" checked="@(Model.NeedShippingAddress?"checked":null)">
                                                <label class="form-check-label fs-16 fw-bold" for="item-model-check">Need Shipping Address</label>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <div class="row">
                                    <DropdownSelect @ref="@CurrencyDropdown"
                                                    DropdownID="@QuotationCurrecyDropdownID"
                                                    DivClass="col-md-7"
                                                    IsRequired="true"
                                                    Label="Currency :"
                                                    ReadDataOnSearch="true"
                                                    Mode="(int)DropdownModes.Currency"
                                                    ModeGroup="(int)DropdownModes.CommonSearch"
                                                    SelectedItem="@(new DropdownSelectedItemModel(){ID = Model.CurrencyID, Value=Model.CurrencyName})"
                                                    ItemSelected="(DropdownItemSelectedCallbackModel customer) =>  HandleCurrencySelected(customer)" />
                                    @*  <ValidationMessage For="()=>Model.CurrencyID" /> *@
                                </div>

                                <div class="row">
                                    <DropdownSelect @ref="@PlaceOfSupplyDropdown"
                                                    DropdownID="@PlaceOfSupplyDropdownID"
                                                    DivClass="col-md-7"
                                                    Label="Place Of Supply :"
                                                    ReadDataOnSearch="true"
                                                    Mode="(int)DropdownModes.PlaceOfSupply"
                                                    ModeGroup="(int)DropdownModes.CommonSearchWithID"
                                                    CommonSearch="@(new CommonSearchModel(){ ID = QuotationSettings.CountryID })"
                                                    SelectedItem="@(new DropdownSelectedItemModel(){ID = Model.PlaceOfSupplyID, Value=Model.PlaceOfSupplyName})"
                                                    ItemSelected="async (DropdownItemSelectedCallbackModel customer) => await HandlePlaceOfSupplySelected(customer)" />
                                    @*  <ValidationMessage For="()=>Model.PlaceOfSupplyID" /> *@
                                </div>
                            }

                            <div class="row">
                                <div class="col-md-7 ">
                                    <div class="form-group">
                                        <label class="form-label mt-0 me-1"> Date :</label>
                                        <input type="date" class="form-control" @bind="Model.Date" id="invoice-date-picker">
                                        <ValidationMessage For="()=>Model.Date" />
                                    </div>
                                </div>
                            </div>

                            <div class="row">
                                <div class="col-md-7">
                                    <div class="form-group">
                                        <label class="form-label mt-0 me-1">Expiry Date :</label>
                                        <input type="date" class="form-control" @bind="Model.ExpiryDate" id="invoice-date-picker">
                                        <ValidationMessage For="()=>Model.ExpiryDate" />
                                    </div>
                                </div>
                            </div>

                            <div class="row">
                                <div class="col-md-7">
                                    <div class="form-group">
                                        <label class="form-label mt-0 me-1">
                                            Business Type :
                                            <span class="ms-1" style="color:red">*</span>
                                        </label>
                                        <div class="input-group">
                                            <DropdownSelect @ref="@BusinessTypeDropdown"
                                                            DropdownID="@BusinessTypeDropdownID"
                                                            DivClass="col-md-12 px-0"
                                                            IsRequired="true"
                                                            ReadDataOnSearch="true"
                                                            IsAddOptionNeed="true"
                                                            Mode="(int)DropdownModes.BusinessType"
                                                            ModeGroup="(int)DropdownModes.CommonSearch"
                                                            SelectedItem="@(new DropdownSelectedItemModel(){ID = Model.BusinessTypeID, Value=Model.BusinessTypeName})"
                                                            ItemSelected="async (DropdownItemSelectedCallbackModel business) => await HandleBusinessTypeSelected(business)"
                                                            NewButtonClicked="async (int dropdownMode) => await HandelAddNewBusinessTypeButtonClick(dropdownMode)"
                                                            NewButtonText="Add Business Type" />

                                        </div>
                                        <ValidationMessage For="() => Model.BusinessTypeID" />
                                    </div>
                                </div>
                            </div>

                            <div class="row">
                                <div class="col-md-7">
                                    <div class="form-group">
                                        <label class="form-label mt-0 me-1">Description :</label>
                                        <input type="text" class="form-control" @bind="Model.Description" id="description-id">
                                        <ValidationMessage For="()=>Model.Description" />
                                    </div>
                                </div>
                            </div>

                            <div class="row">
                                <div class="col-md-7">
                                    <div class="form-group">
                                        <label class="form-label mt-0 me-1">
                                            Quotation Created For :
                                            <span class="ms-1" style="color:red">*</span>
                                        </label>
                                        <div class="input-group">
                                            <DropdownSelect @ref="@CreatedForDropdown"
                                                            DropdownID="@CreatedForDropdownID"
                                                            DivClass="col-md-12 px-0"
                                                            IsRequired="true"
                                                            ReadDataOnSearch="true"
                                                            IsAddOptionNeed="false"
                                                            Mode="(int)DropdownModes.QuotationCreatedStaff"
                                                            ModeGroup="(int)DropdownModes.CommonSearch"
                                                            SelectedItem="@(new DropdownSelectedItemModel(){ID = Model.QuotationCreatedFor, Value=Model.StaffName})"
                                                            ItemSelected="async (DropdownItemSelectedCallbackModel staff) => await HandleCretedForSelected(staff)" />

                                        </div>
                                        <ValidationMessage For="() => Model.QuotationCreatedFor" />
                                    </div>

                                </div>
                            </div>
                            @if (Model.QuotationCreatedFor != null)
                            {
                                <div class="row">
                                    <div class="col-md-7">
                                        <div class="form-group">
                                            <label class="form-label mt-0 me-1">Staff Phone No :</label>
                                            <input type="text" class="form-control" @bind="Model.StaffPhoneNo" id="staff-id">
                                        </div>
                                    </div>
                                </div>
                            }



                            <div class="row">
                                @if (Model.QuotationID == 0)
                                {
                                    <div class="col-md-7">
                                        <div class="form-group">
                                            <label class="form-label mt-0 me-1">Quotation Number :</label>
                                            <div class="input-group">
                                                <span class="input-group-text" style="background-color:var(--primary-bg-color);">
                                                    @("QT")
                                                </span>
                                                <input type="text" class="form-control" value="New Quotation" style="pointer-events:none">
                                            </div>
                                        </div>
                                    </div>
                                }
                                else
                                {
                                    <div class="col-md-7">
                                        <div class="form-group">
                                            <label class="form-label mt-0 me-1">Quotation Number :</label>
                                            <div class="input-group">
                                                <span class="input-group-text" style="background-color:var(--primary-bg-color);">
                                                    @("QT")
                                                </span>
                                                <input type="number" class="form-control" @bind="Model.QuotationNo" disabled>
                                            </div>
                                            <ValidationMessage For="() => Model.QuotationNo" />
                                        </div>
                                    </div>
                                }
                            </div>

                            <div class="row">
                                <div class="col-md-7">
                                    <div class="form-group">
                                        <label class="form-label mt-0 me-1">Subject :</label>
                                        <textarea name="" class="textarea form-control" cols="2" rows="2" @bind="Model.Subject" placeholder="Let your customer know what this quotation for.."></textarea>
                                    </div>
                                </div>
                            </div>

                        </div>
                    </div>
                </div>

                <!--Quotation Item-->
                <div class="col-12 mt-4">
                    <div class="card">
                        <div class="card-header">
                            <h5 style="margin-bottom: 0 !important;">Quotation Items</h5>
                        </div>
                        <div class="card-body">
                            <div class="row mb-2">
                                <div class="">
                                    <table class="table border text-nowrap text-md-nowrap table-bordered mb-5">
                                        <thead>
                                            <tr>
                                                <th>
                                                    Item Name
                                                </th>
                                                <th>
                                                    Description
                                                </th>
                                                <th>
                                                    Quantity
                                                </th>
                                                <th>
                                                    Rate
                                                </th>
                                                <th>
                                                    Discount
                                                </th>
                                                <th>
                                                    Tax
                                                </th>
                                                <th>
                                                    Amount
                                                </th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @if (Model.QuotationItems != null && Model.QuotationItems.Count > 0)
                                            {
                                                @foreach (var item in Model.QuotationItems.Select((value, i) => new { i, value }))
                                                {
                                                    var quotationItem = item.value;
                                                    int index = item.i;
                                                    @if (!quotationItem.IsRowInEditMode)
                                                    {
                                                        <tr>
                                                            <td>
                                                                <div class="d-flex align-items-center jusify-content-center">
                                                                    <div>
                                                                        @quotationItem.ItemName
                                                                    </div>
                                                                </div>
                                                            </td>
                                                            <td>
                                                                @quotationItem.Description
                                                            </td>
                                                            <td>
                                                                @quotationItem.Quantity
                                                            </td>
                                                            <td>
                                                                @quotationItem.Rate
                                                            </td>
                                                            <td>
                                                                @quotationItem.Discount
                                                            </td>
                                                            <td>
                                                                @if (quotationItem.TaxPreferenceTypeID == (int)TaxPreferences.NonTaxable)
                                                                {
                                                                    @("Non taxable")
                                                                }
                                                                else if (quotationItem.TaxPreferenceTypeID == (int)TaxPreferences.NonGstSupply)
                                                                {
                                                                    @("Non gst supply")
                                                                }
                                                                else if (quotationItem.TaxPreferenceTypeID == (int)TaxPreferences.OutOfScope)
                                                                {
                                                                    @("Out of scope")
                                                                }
                                                                else
                                                                {
                                                                    @quotationItem.TaxCategoryName
                                                                }
                                                            </td>
                                                            <td>
                                                                @quotationItem.TotalAmount
                                                            </td>
                                                        </tr>
                                                        <tr>
                                                            <td colspan="7" class="py-1 bg-light">
                                                                <ul class="d-flex gap-2">
                                                                    <li class="border-end pe-2 text-muted" style="cursor:pointer">
                                                                        <span @onclick="async () => await HandleQuotationItemEditClick(quotationItem)">
                                                                            <i class="fe fe-edit me-1" style="color:var(--primary-bg-color)" aria-hidden="true"></i> Edit item
                                                                        </span>
                                                                    </li>
                                                                    <li class="border-end pe-2 text-muted" style="cursor:pointer">
                                                                        <span @onclick="async () => await HandleQuotationItemRemoveClick(quotationItem)">
                                                                            <i class="fa fa-trash me-1" style="color:red" aria-hidden="true"></i> Remove item
                                                                        </span>
                                                                    </li>
                                                                </ul>
                                                            </td>
                                                        </tr>
                                                    }
                                                    else
                                                    {
                                                        <tr>
                                                            <td class="px-0" style="min-width:200px">
                                                                <DropdownSelect DropdownID="@(RowItemDropdownID+index)" @ref="@RowItemDropdown"
                                                                                DivClass="col-md-12 px-0"
                                                                                FormGroupClass="form-group mb-0"
                                                                                FormControlClass="pb-select form-control form-control-custom"
                                                                                IsAddOptionNeed="true"
                                                                                ReadDataOnSearch="true"
                                                                                Mode="(int)DropdownModes.Item"
                                                                                RoleName="Item"
                                                                                ModeGroup="(int)DropdownModes.CommonSearch"
                                                                                SelectedItem="@(new DropdownSelectedItemModel(){ID = quotationItem.ItemVariantID, Value = quotationItem.ItemName})"
                                                                                ItemSelected="@(async (DropdownItemSelectedCallbackModel itemModel) => await HandleQuotationItemSelected(itemModel, quotationItem))"
                                                                                NewButtonText="New Item"
                                                                                NewButtonClicked="@(async (int dropdownMode) => await HandleAddNewQuotationItemButtonClick(dropdownMode, index))" />
                                                            </td>
                                                            <td class="px-0">
                                                                <input type="text" class="form-control form-control-custom" @bind="quotationItem.Description" />
                                                            </td>
                                                            <td class="px-0">
                                                                @if (quotationItem.ItemVariantID == null)
                                                                {
                                                                    <input type="text" class="form-control form-control-custom" value="0" disabled />
                                                                }
                                                                else
                                                                {
                                                                    <input type="number" class="form-control form-control-custom" id="@(RowItemQuantityBoxID+index)" value="@quotationItem.Quantity" @onchange="(ChangeEventArgs e) => HandleQuotationItemQuantityChange(quotationItem, e)">
                                                                }
                                                            </td>
                                                            <td class="px-0">
                                                                @if (quotationItem.ItemVariantID == null)
                                                                {
                                                                    <input type="text" class="form-control form-control-custom" value="0" disabled />
                                                                }
                                                                else
                                                                {
                                                                    <input type="number" class="form-control form-control-custom" id="@(RowItemRateBoxID+index)" value="@quotationItem.Rate" @onchange="(ChangeEventArgs e) => HandlequotationItemRateChange(quotationItem, e)">
                                                                }
                                                            </td>
                                                            <td class="px-0">
                                                                @if (quotationItem.ItemVariantID == null)
                                                                {
                                                                    <input type="text" class="form-control form-control-custom" value="0" disabled />
                                                                }
                                                                else
                                                                {
                                                                    <input type="number" class="form-control form-control-custom" id="@(RowItemDiscountBoxID+index)" value="@quotationItem.Discount" @onchange="(ChangeEventArgs e) => HandlequotationItemDiscountChange(quotationItem, e)" />
                                                                }
                                                            </td>
                                                            <td class="px-0" style="min-width:200px">
                                                                @if (quotationItem.ItemVariantID == null)
                                                                {
                                                                    <input type="text" class="form-control form-control-custom" value="choose item" disabled />
                                                                }
                                                                else if (quotationItem.TaxPreferenceTypeID == (int)TaxPreferences.NonTaxable)
                                                                {
                                                                    <input type="text" class="form-control form-control-custom" value="Non Taxable" disabled />
                                                                }
                                                                else if (quotationItem.TaxPreferenceTypeID == (int)TaxPreferences.NonGstSupply)
                                                                {
                                                                    <input type="text" class="form-control form-control-custom" value="Non-Gst Supply" disabled />
                                                                }
                                                                else if (quotationItem.TaxPreferenceTypeID == (int)TaxPreferences.OutOfScope)
                                                                {
                                                                    <input type="text" class="form-control form-control-custom" value="Out of scope" disabled />
                                                                }
                                                                else
                                                                {
                                                                    <DropdownSelect DropdownID="@(RowTaxCategoryDropdownID)" @ref="@RowTaxCategoryDropdown"
                                                                                    DivClass="col-md-12 px-0"
                                                                                    FormGroupClass="form-group px-0"
                                                                                    FormControlClass="pb-select form-control form-control-custom"
                                                                                    IsAddOptionNeed="true"
                                                                                    ReadDataOnSearch="false"
                                                                                    Mode="(int)DropdownModes.TaxCategory"
                                                                                    ModeGroup="(int)DropdownModes.CommonSearch"
                                                                                    SelectedItem="@(new DropdownSelectedItemModel(){ID = quotationItem.TaxCategoryID, Value = quotationItem.TaxCategoryName})"
                                                                                    ItemSelected="@(async (DropdownItemSelectedCallbackModel taxCategory) => await HandleQuotationItemTaxCategorySelected(taxCategory,quotationItem))"
                                                                                    NewButtonText="New Item"
                                                                                    NewButtonClicked="@(async (int dropdownMode) => await HandelAddNewTaxCategoryButtonClick(dropdownMode, index))" />
                                                                }
                                                            </td>
                                                            <td class="px-0">
                                                                <input type="number" class="form-control form-control-custom" @bind="quotationItem.TotalAmount" disabled style="pointer-events:none" />
                                                            </td>
                                                        </tr>
                                                        <tr>
                                                            <td colspan="7" class="py-1 bg-light">
                                                                <ul class="d-flex gap-2">
                                                                    <li class="border-end pe-2 text-muted" style="cursor:pointer">
                                                                        <span @onclick="async () => await HandleQuotationItemUpdateClick(quotationItem)">
                                                                            <i class="fe fe-check me-1" style="color:green" aria-hidden="true"></i> Update item
                                                                        </span>
                                                                    </li>
                                                                    <li class="border-end pe-2 text-muted" style="cursor:pointer">
                                                                        <span @onclick="async () => await HandleQuotationItemRemoveClick(quotationItem)">
                                                                            <i class="fa fa-trash me-1" style="color:red" aria-hidden="true"></i> Remove item
                                                                        </span>
                                                                    </li>
                                                                </ul>
                                                            </td>
                                                        </tr>
                                                    }
                                                }
                                            }
                                        </tbody>
                                        <tfoot>
                                            <tr>
                                                <td class="px-0" style="min-width:200px">
                                                    <DropdownSelect DropdownID="@(FooterItemDropdownID)" @ref="@FooterItemDropdown"
                                                                    DivClass="col-md-12 px-0"
                                                                    FormGroupClass="form-group mb-0"
                                                                    FormControlClass="pb-select form-control form-control-custom"
                                                                    IsAddOptionNeed="true"
                                                                    ReadDataOnSearch="true"
                                                                    Mode="(int)DropdownModes.Item"
                                                                    ModeGroup="(int)DropdownModes.CommonSearch"
                                                                    SelectedItem="@(new DropdownSelectedItemModel(){ID = Footer.ItemVariantID, Value = Footer.ItemName})"
                                                                    ItemSelected="@(async (DropdownItemSelectedCallbackModel itemModel) => await HandleQuotationItemSelected(itemModel, Footer))"
                                                                    NewButtonText="New Item"
                                                                    NewButtonClicked="@(async (int dropdownMode) => await HandleAddNewQuotationItemButtonClick(dropdownMode))" />
                                                </td>
                                                <td class="px-0">
                                                    <input type="text" class="form-control form-control-custom" @bind="@Footer.Description" />
                                                </td>
                                                <td class="px-0">
                                                    @if (Footer.ItemVariantID == null)
                                                    {
                                                        <input type="text" class="form-control form-control-custom" value="0" disabled />
                                                    }
                                                    else
                                                    {
                                                        <input type="text" class="form-control form-control-custom" id="@FooterItemQuantityBoxID" value="@Footer.Quantity" @onchange="(ChangeEventArgs e) => HandleQuotationItemQuantityChange(Footer, e)">
                                                    }
                                                </td>
                                                <td class="px-0">
                                                    @if (Footer.ItemVariantID == null)
                                                    {
                                                        <input type="text" class="form-control form-control-custom" value="0" disabled />
                                                    }
                                                    else
                                                    {
                                                        <input type="text" class="form-control form-control-custom" id="@FooterItemRateBoxID" value="@Footer.Rate" @onchange="(ChangeEventArgs e) => HandlequotationItemRateChange(Footer, e)">
                                                    }
                                                </td>
                                                <td class="px-0">
                                                    @if (Footer.ItemVariantID == null)
                                                    {
                                                        <input type="number" class="form-control form-control-custom" value="0" disabled />
                                                    }
                                                    else
                                                    {
                                                        <input type="number" class="form-control form-control-custom" value="@Footer.Discount" @onchange="(ChangeEventArgs e) => HandlequotationItemDiscountChange(Footer, e)" />
                                                    }
                                                </td>
                                                <td class="px-0" style="min-width:200px">
                                                    @if (Footer.ItemVariantID == null)
                                                    {
                                                        <input type="text" class="form-control form-control-custom" value="choose item" disabled />
                                                    }
                                                    else if (Footer.TaxPreferenceTypeID == (int)TaxPreferences.NonTaxable)
                                                    {
                                                        <input type="text" class="form-control form-control-custom" value="Non Taxable" disabled />
                                                    }
                                                    else if (Footer.TaxPreferenceTypeID == (int)TaxPreferences.NonGstSupply)
                                                    {
                                                        <input type="text" class="form-control form-control-custom" value="Non-Gst Supply" disabled />
                                                    }
                                                    else if (Footer.TaxPreferenceTypeID == (int)TaxPreferences.OutOfScope)
                                                    {
                                                        <input type="text" class="form-control form-control-custom" value="Out of scope" disabled />
                                                    }
                                                    else
                                                    {
                                                        <DropdownSelect DropdownID="@(FooterTaxCategoryDropdoownID)" @ref="@FooterTaxCategoryDropdown"
                                                                        DivClass="col-md-12 px-0"
                                                                        FormGroupClass="form-group px-0"
                                                                        FormControlClass="pb-select form-control form-control-custom"
                                                                        IsAddOptionNeed="true"
                                                                        ReadDataOnSearch="false"
                                                                        Mode="(int)DropdownModes.TaxCategory"
                                                                        ModeGroup="(int)DropdownModes.CommonSearch"
                                                                        SelectedItem="@(new DropdownSelectedItemModel(){ID = Footer.TaxCategoryID, Value = Footer.TaxCategoryName})"
                                                                        ItemSelected="@(async (DropdownItemSelectedCallbackModel taxCategory) => await HandleQuotationItemTaxCategorySelected(taxCategory,Footer))"
                                                                        NewButtonText="New Tax Category"
                                                                        NewButtonClicked="@(async (int dropdownMode) => await HandelAddNewTaxCategoryButtonClick(dropdownMode))" />
                                                    }
                                                </td>
                                                <td class="px-0">
                                                    <input type="number" class="form-control form-control-custom" @bind="Footer.TotalAmount" disabled style="pointer-events:none" />
                                                </td>
                                            </tr>
                                            <tr>
                                                <td colspan="7" class="py-1 bg-light">
                                                    <ul class="d-flex gap-2">
                                                        <li class="border-end pe-2 text-muted" style="cursor:pointer">
                                                            <span @onclick="async () => await HandleAddFooterButtonClick()">
                                                                <i class="fe fe-plus plus-icon me-1" aria-hidden="true"></i> Add Item
                                                            </span>
                                                        </li>
                                                        <li class="border-end pe-2 text-muted" style="cursor:pointer">
                                                            <span @onclick="async () => Footer = new(){IsRowInEditMode = false}">
                                                                <i class="fa fa-refresh me-1" aria-hidden="true"></i> Reset footer
                                                            </span>
                                                        </li>
                                                    </ul>
                                                </td>
                                            </tr>
                                        </tfoot>
                                    </table>
                                </div>
                            </div>

                            <!--Terms and Conditions-->
                            <div class="row mt-4">
                                <div class="col-md-6 col-12">
                                    <div class="form-group mt-2">
                                        <label class="form-label mt-0 me-1">Terms & Conditions :  <br /><span style="color:#8f8f8f;font-size: 12px;">(For getting bullet points use '#' in the beginning)</span></label>
                                        <textarea placeholder="Enter the terms and conditions of your business to be displayed in your transaction" class="form-control" rows="4" @bind="Model.TermsandCondition"></textarea> <br>
                                    </div>
                                </div>
                                <div class="col-md-6 col-12">
                                    <label class="form-label">Attach File(s) to Estimate</label>
                                    <input id="demo" type="file" name="files" accept=".jpg, .png, image/jpeg, image/png" multiple="" class="ff_fileupload_hidden"><div class="ff_fileupload_wrap"><div class="ff_fileupload_dropzone_wrap"><button class="ff_fileupload_dropzone" type="button" aria-label="Browse, drag-and-drop, or paste files to upload"></button></div><table class="ff_fileupload_uploads"></table></div>
                                    <p style="font-size: 11px !important;">You can upload a maximum of 5 files, 5MB each</p>
                                </div>
                            </div>

                        </div>
                    </div>
                </div>

                <!--Quotation Summary-->
                <div class="row mt-4">
                    <div class="col-md-6 col-12">
                        <div class="form-group">
                            <label class="form-label mt-0 me-1">Customer Notes : <br /><span style="color:#8f8f8f;font-size: 12px;">(For getting bullet points use '#' in the beginning)</span></label>
                            <textarea class="form-control" placeholder="Enter any notes to be displayed in your transaction)" rows="10" @bind="Model.CustomerNote"></textarea> <br>
                        </div>
                    </div>
                    <div class="col-md-6 col-12">
                        <div class="card">
                            <div class="card-body fee-card">

                                <!--Sub Total-->
                                <div class="row mt-1">
                                    <div class="col-md-5 mt-2">
                                        <p style="margin-bottom: 0 !important;">Sub Total :</p>
                                    </div>
                                    <div class="col-md-4 px-0">
                                    </div>
                                    <div class="col-md-3">
                                        <div class="mt-2" style="text-align: right;">
                                            <p style="margin-bottom: 0 !important;" id="optText">
                                                @(Math.Round((Model.TotalAmount), 2))
                                            </p>
                                        </div>
                                    </div>
                                </div>

                                <!--Total Discount-->
                                <div class="row mt-1">
                                    <div class="col-md-5 mt-2">
                                        <p style="margin-bottom: 0 !important;">Discount :</p>
                                    </div>
                                    <div class="col-md-4 px-0">
                                    </div>
                                    <div class="col-md-3">
                                        <div class="mt-2" style="text-align: right;">
                                            <p style="margin-bottom: 0 !important;" id="optText">
                                                @(Math.Round((Model.TotalDiscount), 2))
                                            </p>
                                        </div>
                                    </div>
                                </div>

                                <!--Total Net Amount-->
                                <div class="row mt-1">
                                    <div class="col-md-5 mt-2">
                                        <p style="margin-bottom: 0 !important;">Net Amount :</p>
                                    </div>
                                    <div class="col-md-4 px-0">
                                    </div>
                                    <div class="col-md-3">
                                        <div class="mt-2" style="text-align: right;">
                                            <p style="margin-bottom: 0 !important;" id="optText">
                                                @(Math.Round((Model.NetAmount), 2))
                                            </p>
                                        </div>
                                    </div>
                                </div>

                                <!--Tax category items-->
                                @if (GroupedTaxCategoryItems.Count > 0)
                                {
                                    @foreach (var taxCategoryItem in GroupedTaxCategoryItems)
                                    {
                                        <div class="row mt-1">
                                            <div class="col-md-5 mt-2">
                                                <p style="margin-bottom: 0 !important;">@taxCategoryItem.TaxCategoryItemName</p>
                                            </div>
                                            <div class="col-md-4 px-0">
                                                <div class="mt-2" style="text-align: right;">
                                                    <p style="margin-bottom: 0 !important;" id="optText">
                                                        @(Math.Round((taxCategoryItem.TaxAmount), 2))
                                                    </p>
                                                </div>
                                            </div>
                                            <div class="col-md-3">
                                            </div>
                                        </div>
                                    }
                                }

                                <!--Total Tax Amount-->
                                <div class="row mt-1">
                                    <div class="col-md-5 mt-2">
                                        <p style="margin-bottom: 0 !important;">Tax Amount :</p>
                                    </div>
                                    <div class="col-md-4 px-0">
                                    </div>
                                    <div class="col-md-3">
                                        <div class="mt-2" style="text-align: right;">
                                            <p style="margin-bottom: 0 !important;" id="optText">
                                                @(Math.Round((Model.TaxAmount), 2))
                                            </p>
                                        </div>
                                    </div>
                                </div>

                                <!--Gross Amount-->
                                <div class="row mt-1">
                                    <div class="col-md-5 mt-2">
                                        <p style="margin-bottom: 0 !important;">Gross Amount :</p>
                                    </div>
                                    <div class="col-md-4 px-0">
                                    </div>
                                    <div class="col-md-3">
                                        <div class="mt-2" style="text-align: right;">
                                            <p style="margin-bottom: 0 !important;" id="optText">
                                                @(Math.Round((Model.GrossAmount), 2))
                                            </p>
                                        </div>
                                    </div>
                                </div>

                            </div>
                        </div>
                    </div>
                </div>

                <!--Assigness and Mail Recipients-->
                <div class="col-12 mt-4">
                    <div class="card">
                        <div class="card-body">

                            <!--Followup Assignees-->
                            @if (Users.Count > 0)
                            {
                                <div class="row">
                                    <div class="col-12">
                                        <div class="mt-2 d-flex flex-row">
                                            <label class="form-label" style="display: inline;">Assign To | </label>
                                            <div style="width:100px" class="py-2">
                                                <input type="checkbox" id="assigneeSelectAll" class="d-none" @onchange=" (ChangeEventArgs e) => HandleAssigneesSelectAllClicked(e)" />
                                                @if (Model.QuotationAssignees is null || (Model.QuotationAssignees is not null && Model.QuotationAssignees.Count != Users.Count))
                                                {
                                                    <label class="form-label ms-2 text-info" style="display: inline;cursor:pointer;" for="assigneeSelectAll">
                                                        <i class="fa fa-check text-success" aria-hidden="true"></i>
                                                        Select All
                                                    </label>
                                                }
                                                else if (Model.QuotationAssignees is not null && Model.QuotationAssignees.Count == Users.Count)
                                                {
                                                    <label class="form-label ms-2 text-info" style="display: inline;cursor:pointer;" for="assigneeSelectAll">
                                                        <i class="fa fa-times text-danger" aria-hidden="true"></i>
                                                        Deselect All
                                                    </label>
                                                }
                                            </div>
                                        </div>

                                        <div class="mt-2 border p-1 d-flex flex-row">
                                            @for (int i = 0; i < Users.Count; i++)
                                            {
                                                IdnValuePair assignee = Users[i];
                                                bool isAssigned = Model.QuotationAssignees is not null && Model.QuotationAssignees.Count > 0 && Model.QuotationAssignees.Where(user => user.EntityID == assignee.ID).FirstOrDefault() is not null ? true : false;
                                                <div class="form-check form-check-inline bx-border">
                                                    <input class="form-check-input" type="checkbox" checked="@(isAssigned?"checked":null)" id="@("assignee-"+assignee.ID)" @onchange="(ChangeEventArgs e) => HandleAssigneeSelected(e, assignee)">
                                                    <img class="ms-2" src="/assets/images/user.svg" style="width: 20px;" alt="">
                                                    <label class="form-check-label ms-2" for="@("assignee-"+assignee.ID)">
                                                        @assignee.Value
                                                    </label>
                                                </div>
                                            }
                                        </div>
                                    </div>
                                </div>
                            }

                          @*   @if (CustomerData.MailReceipients != null && CustomerData.MailReceipients.Count > 0)
                            { *@
                                <!--Mail Reciepients-->
                                <div class="row mt-4">
                                    <div class="col-12">
                                        <div class="mt-2 d-flex flex-row flex-wrap gap-2">
                                            <label class="form-label" style="display: inline;">Mail To | </label>
                                            <div style="width:100px" class="py-2">
                                                <input type="checkbox" id="mailRecipientSelectAll" class="d-none" @onchange=" (ChangeEventArgs e) => HandleMailReciepientsSelectAllClicked(e)" />
                                                @if ((Model.MailReciepients is null || (Model.MailReciepients is not null && Model.MailReciepients.Count != CustomerData.MailReceipients.Count)))
                                                {
                                                    <label class="form-label ms-2 text-success" style="display: inline;cursor:pointer;" for="mailRecipientSelectAll">
                                                        <i class="fa fa-check text-success" aria-hidden="true"></i>
                                                        Select All
                                                    </label>
                                                }
                                                else if (Model.MailReciepients is not null && Model.MailReciepients.Count == CustomerData.MailReceipients.Count)
                                                {
                                                    <label class="form-label ms-2 text-info" style="display: inline;cursor:pointer;" for="mailRecipientSelectAll">
                                                        <i class="fa fa-times text-danger" aria-hidden="true"></i>
                                                        Deselect All
                                                    </label>
                                                }
                                            </div>
                                            <div style="width:200px">
                                                <button class="btn" type="button" style="color:var(--primary-bg-color)" @onclick="async () => await OpenCustomerContactPersonModal()">
                                                    <span class="me-2 ms-3" style="color:black">|</span>
                                                    <i class="fe fe-plus me-1 text-success"></i>
                                                    Add mail recipient
                                                </button>
                                            </div>
                                        </div>
                                        <div class="mt-2 border p-1 d-flex flex-row">
                                            @for (int i = 0; i < CustomerData.MailReceipients.Count; i++)
                                            {
                                                MailRecipentsModel mailRecipient = CustomerData.MailReceipients[i];
                                                bool isSelected = Model.MailReciepients is not null && Model.MailReciepients.Where(MR => MR.EntityID == mailRecipient.EntityID).FirstOrDefault() is not null ? true : false;
                                                <div class="form-check form-check-inline bx-border">
                                                    <input class="form-check-input" type="checkbox" checked="@(isSelected?"checked":null)" id="@("mail-recipient-"+mailRecipient.EntityID)" @onchange="(ChangeEventArgs e) => HandleMailReciepientSelected(e, mailRecipient)">
                                                    <img class="ms-2" src="/assets/images/user.svg" style="width: 20px;" alt="">
                                                    <label class="form-check-label ms-2" for="@("mail-recipient-"+mailRecipient.EntityID)">
                                                        @mailRecipient.EmailAddress
                                                    </label>
                                                </div>
                                            }
                                        </div>
                                    </div>
                                </div>
                            @* } *@
                        </div>
                    </div>
                </div>

            </div>
        </div>
        <div class="page-footer-action d-flex justify-content-end">
            <button type="submit" class="btn btn-primary me-2">Save</button>
            <a class="btn btn-danger me-2 text-white" @onclick="Cancel">Cancel</a>
        </div>
    </EditForm>
</PageLayoutNew>

<!--Address Modal-->
<div class="modal fade" id="address-add-modal">
    <div class="modal-dialog modal-dialog-scrollable">
        <EditForm Model="NewAddressModel" autocomplete="off" OnValidSubmit="SaveCustomerAddress">
            <DataAnnotationsValidator />
            <div class="modal-content modal-content-demo">

                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">NEW ADDRESS</h5>
                    <h6 class="modal-title"></h6><button type="button" aria-label="Close" class="btn-close" @onclick="async () => await CloseAddressModal()"><span aria-hidden="true">&times;</span></button>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="form-group col-md-12">
                            <label class="form-label" style="text-align: left; margin-top: 0 !important;">
                                Address Type :
                            </label>
                            <select class="form-control form-select" id="address-type-select" @bind="NewAddressModel.AddressType">
                                <option value="0" selected>Choose</option>
                                <option value="@((int)AddressTypes.Home)">Home</option>
                                <option value="@((int)AddressTypes.Office)">Office</option>
                                <option value="@((int)AddressTypes.Billing)">Billing</option>
                                <option value="@((int)AddressTypes.Shipping)">Shipping</option>
                                <option value="@((int)AddressTypes.Other)">Other</option>
                            </select>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-12">
                            <div class="form-group">
                                <label class="form-label mt-0" style="text-align: left; margin-top: 0 !important;">
                                    Address Line 1 :
                                    <span style="color:red">*</span>
                                </label>
                                <textarea class="textarea form-control" id="address-line-1-text-area" rows="2" @bind="NewAddressModel.AddressLine1"></textarea>
                                <ValidationMessage For="() => NewAddressModel.AddressLine1" />
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-12">
                            <div class="form-group">
                                <label class="form-label mt-0" style="text-align: left; margin-top: 0 !important;">
                                    Address Line 2 :
                                </label>
                                <textarea class="textarea form-control" id="address-line-2-text-area" rows="2" @bind="NewAddressModel.AddressLine2"></textarea>
                                <ValidationMessage For="() => NewAddressModel.AddressLine2" />
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-12">
                            <div class="form-group">
                                <label class="form-label mt-0" style="text-align: left; margin-top: 0 !important;">
                                    Address Line 3 :
                                </label>
                                <textarea class="textarea form-control" id="address-line-3-text-area" rows="2" @bind="NewAddressModel.AddressLine3"></textarea>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <InputTextBox Label="Pincode : " @bind-Value="NewAddressModel.Pincode"
                                      ValidationFor="() => NewAddressModel.Pincode"
                                      DivClass="col-md-12" id="pincode-input-box" />

                    </div>
                    <div class="row">
                        <!--COUNTRY-->
                        <DropdownSelect DivClass="col-md-12"
                                        DropdownID="@CountryDropdownID"
                                        Label="Country :"
                                        Mode="(int)DropdownModes.Country"
                                        ModeGroup="(int)DropdownModes.CommonSearch"
                                        ItemSelected="HandleAddressCountrySelected"
                                        IsRequired="true"
                                        ReadDataOnSearch="true"
                                        SelectedItem="@(new DropdownSelectedItemModel(){ID=NewAddressModel.CountryID,Value=NewAddressModel.CountryName})" />

                    </div>
                    <div class="row" style="@StatePointerEvent">
                        <!--STATE-->
                        <DropdownSelect DivClass="col-md-12" @ref="AddressStateDropdown"
                                        DropdownID="@StateDropdownID"
                                        Label="State : "
                                        ReadDataOnSearch="true"
                                        Mode="(int)DropdownModes.State"
                                        CommonSearch="@(new CommonSearchModel(){ID = Convert.ToInt32(NewAddressModel.CountryID)})"
                                        ModeGroup="(int)DropdownModes.CommonSearchWithID"
                                        ItemSelected="HandleAddressStateSelected"
                                        SelectedItem="@(new DropdownSelectedItemModel(){ID=NewAddressModel.StateID,Value=NewAddressModel.State})"
                                        IsAddOptionNeed="false"
                                        NewButtonText="Add New State" />


                    </div>
                    <div class="row" style="@StatePointerEvent">
                        <!--CITY-->
                        <DropdownSelect DivClass="col-md-12" @ref="AddressCityDropdown"
                                        DropdownID="@CityDropdownID"
                                        Label="City : "
                                        ReadDataOnSearch="true"
                                        Mode="(int)DropdownModes.City"
                                        ModeGroup="(int)DropdownModes.CommonSearchWithID"
                                        ItemSelected="HandleAddressCitySelected"
                                        CommonSearch="@(new CommonSearchModel(){ID = Convert.ToInt32(NewAddressModel.StateID)})"
                                        SelectedItem="@(new DropdownSelectedItemModel(){ID=NewAddressModel.CityID,Value=NewAddressModel.City})"
                                        IsAddOptionNeed="false"
                                        NewButtonText="Add New City" />
                    </div>
                </div>
                <div class="modal-footer">
                    @if (NewAddressModel.AddressID == 0)
                    {
                        <button class="btn btn-primary" type="submit">Add Address</button>
                        <button class="btn btn-danger" type="button" @onclick="async () => await CloseAddressModal()">Close</button>
                    }
                    else
                    {
                        <button class="btn btn-primary" type="submit">Update Address</button>
                        <button class="btn btn-danger" type="button" @onclick="async () => await CloseAddressModal()">Close</button>
                    }
                </div>

            </div>
        </EditForm>
    </div>
</div>

<!--Mail Recipient-->
<div class="modal fade" id="contact-person-add-modal">
    <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable">
        <div class="modal-content modal-content-demo">
            <EditForm Model="NewContactPersonModel" autocomplete="off" OnValidSubmit="SaveMailRecipient">
                <DataAnnotationsValidator />
                <div class="modal-header">
                    <h6 class="modal-title">
                        New Mail Recipeint
                    </h6>
                    <button type="button" class="btn-close" @onclick="async() => await CloseCustomerContactPersonModal()">
                        <span>&times;</span>
                    </button>
                </div>
                <div class="modal-body">

                    <div class="row">

                        <InputTextBox Label="Name :" @bind-Value="NewContactPersonModel.Name"
                                      DivClass="col-md-12"
                                      ValidationFor="() => NewContactPersonModel.Name"
                                      IsRequired="true"
                                      id="person-email-box" />

                        <div class="col-md-12">
                            <div class="form-group">
                                <label class="form-label mt-0 me-1" style="text-align:left;">
                                    Email :
                                    <span style="color:red">*</span>
                                </label>
                                <div class="input-group">
                                    <span class="input-group-text">
                                        <i class="fa fa-envelope"></i>
                                    </span>
                                    <input type="text" class="form-control" @bind="NewContactPersonModel.Email" />

                                </div>
                                <ValidationMessage For="() => NewContactPersonModel.Email" />
                            </div>
                        </div>
                        <div class="col-md-12">
                            <div class="form-group">
                                <label class="form-label mt-0 me-1" style="text-align:left;">
                                    Phone :
                                    <span style="color:red">*</span>
                                </label>
                                <div class="input-group">
                                    <span class="input-group-text">
                                        @QuotationSettings.ISDCode
                                    </span>
                                    <input type="text" class="form-control" @bind="NewContactPersonModel.Phone" />

                                </div>
                                <ValidationMessage For="() => NewContactPersonModel.Phone" />
                            </div>
                        </div>
                        <InputTextBox Label="Designation :" @bind-Value="NewContactPersonModel.Designation"
                                      DivClass="col-md-12" id="account-group-name-text-box" />
                        <InputTextBox Label="Department :" @bind-Value="NewContactPersonModel.Department"
                                      DivClass="col-md-12" id="dept-text-box" />
                    </div>
                </div>
                <div class="modal-footer">
                    @if (NewContactPersonModel.ContactPersonID == 0)
                    {
                        <button type="submit" class="btn btn-primary">Add</button>
                        <button type="button" class="btn btn-danger" @onclick="async() => await CloseCustomerContactPersonModal()">Close</button>
                    }
                    else
                    {
                        <button type="submit" class="btn btn-primary">Update</button>
                        <button type="button" class="btn btn-danger" @onclick="async() => await CloseCustomerContactPersonModal()">Close</button>
                    }
                </div>
            </EditForm>
        </div>
    </div>
</div>

<ModalCustomerNew @ref="@childCustomerModal" Saved="(Func<IdnValuePair, Task>)HandleNewCustomerAdded" />
<ModalItem @ref="childItemModal" Saved="(Func<IdnValuePair, Task>)HandleNewItemAdded" />
@if (Model.CustomerEntityID is not null)
{
    @* <ModalPdfSendConfirmation @ref="modalPdfSendConfirmation" CustomerEntityID="Model.CustomerEntityID.Value" NavBackToUrl="quotation-view" GetPdfApiPath="crm/get-quotation-pdf" /> *@
    <ModalPdfSendConfirmation @ref="modalPdfSendConfirmation" CustomerEntityID="Model.CustomerEntityID.Value" NavBackToUrl="quotation-view" GetPdfApiPath="view-quotation-pdf" />
}
<ModalTaxCategory @ref="@childTaxCategory" />
<ModalBusinessType @ref="@childBusinessTypeModal" Saved="(Func<IdnValuePair, Task>)HandleNewBusinessTypeAdded" />

@code {

    [Parameter] public int QuotationID { get; set; }
    [Parameter] public int EnquiryID { get; set; }

    private QuotationModelNew Model = new();
    private QuotationItemModelNew Footer = new();
    private AddressModel NewAddressModel = new();
    private QuotationInvoiceDefaultSettingsModel QuotationSettings = new();
    private List<IdnValuePair> Users = new();

    private DropdownSelect CustomerDropdown = new();
    private DropdownSelect FooterItemDropdown = new();
    private DropdownSelect RowItemDropdown = new();
    private DropdownSelect AddressStateDropdown = new();
    private DropdownSelect AddressCityDropdown = new();
    private DropdownSelect CurrencyDropdown = new();
    private DropdownSelect RowTaxCategoryDropdown = new();
    private DropdownSelect FooterTaxCategoryDropdown = new();
    private DropdownSelect PlaceOfSupplyDropdown = new();
    private DropdownSelect BusinessTypeDropdown = new();
    private DropdownSelect CreatedForDropdown = new();

    private ModalCustomerNew childCustomerModal = new();
    private ModalItem childItemModal = new();
    private ModalTaxCategory childTaxCategory = new();
    private ModalPdfSendConfirmation modalPdfSendConfirmation = new();

    private string QuotationCustomerSelectID = "quotation-customer-drop-down";
    private string QuotationNumberBoxID = "quotation-number-box";
    private string QuotationCurrecyDropdownID = "quotation-currency-dropdown";
    private string PlaceOfSupplyDropdownID = "quotation-place-of-supply-dropdown";
    private string BusinessTypeDropdownID = "business-type-dropdown";
    private string CreatedForDropdownID = "created-for-dropdown";

    private string RowItemDropdownID = "quotation-item-drop-down-";
    private string RowItemQuantityBoxID = "quotation-item-quantity-box-";
    private string RowItemRateBoxID = "quotation-item-rate-box-";
    private string RowItemDiscountBoxID = "quotation-item-discount-box-";

    private string FooterItemDropdownID = "footer-quotation-item-drop-down";
    private string FooterItemQuantityBoxID = "footer-quotation-item-quantity-box";
    private string FooterItemRateBoxID = "footer-quotation-item-rate-box";
    private string FooterItemDiscountBoxID = "footer-quotation-item-discount-box";

    private string CountryDropdownID = "country-drop-down-select";
    private string StateDropdownID = "state-drop-down-select";
    private string CityDropdownID = "city-drop-down-select";
    private string FooterTaxCategoryDropdoownID = "footer-tax-category-drop-down-select";
    private string RowTaxCategoryDropdownID = "row-tax-category-drop-down-select";

    protected override async Task OnInitializedAsync()
    {
        Users = await API.GetAsync<List<IdnValuePair>>("common/get-client-users", true);
        QuotationSettings = await API.GetAsync<QuotationInvoiceDefaultSettingsModel>($"settings/get-quotation-default-settings", true);
        if (QuotationID == 0 && EnquiryID > 0)
        {
            await ConvertEnquiry();
            HandleWholeQuotationItemsCalculation();
        }
        else if (QuotationID > 0)
        {
            await LoadQuotaionEntry();
            HandleWholeQuotationItemsCalculation();
        }
        else
        {
            Model = new();
            IsBillingAddressSelected = false;
            IsShippingAddressSelected = false;
            Model.Subject = QuotationSettings.Subject;
            Model.CustomerNote = QuotationSettings.CustomerNote;
            Model.TermsandCondition = QuotationSettings.TermsAndConditions;
            Model.NeedShippingAddress = QuotationSettings.NeedShippingAddress;
            Model.CurrencyID = QuotationSettings.CurrencyID;
            Model.CurrencyName = QuotationSettings.CurrencyName;
            Model.PlaceOfSupplyID = QuotationSettings.PlaceOfSupplyID;
            Model.PlaceOfSupplyName = QuotationSettings.PlaceOfSupplyName;
        }
        StateHasChanged();
        await Task.Delay(50);
        await HandlePlaceOfSupplyDataRefreshBasedOnCustomer();
    }

    #region Customer

    private CustomerOrSupplierDataModel CustomerData = new();
    private async Task HandleCustomerSelected(DropdownItemSelectedCallbackModel data, bool needToRefreshPlaceOfSupply = true)
    {
        Model.CustomerEntityID = data.ID;
        Model.CustomerName = data.Value;

        IsBillingAddressSelected = false;
        IsShippingAddressSelected = false;
        SelectedBillingAddress = new();
        SelectedShippingAddress = new();

        if (Model.CustomerEntityID is not null)
        {
            var customerData = await FetchCustomerData(Model.CustomerEntityID.Value);
            if (customerData != null)
            {
                CustomerData = customerData;
                if (CustomerData.CountryID is null)
                {
                    await JS.ErrorMessage("Country for selected customer is not set yet, please choose a country first..");
                    await childCustomerModal.OpenCustomerModal(Model.CustomerEntityID.Value);
                    Model.CustomerEntityID = null;
                    Model.CustomerName = null;
                    CustomerData = new();
                    StateHasChanged();
                    return;
                }

                Model.CurrencyID = CustomerData.CurrencyID;
                if (needToRefreshPlaceOfSupply)
                    await PlaceOfSupplyDropdown.RefreshList(CustomerData.CountryID);
                if (QuotationID == 0)
                {
                    if (CustomerData.CustomerAddresses.Count > 0)
                    {
                        SelectedBillingAddress = CustomerData.CustomerAddresses[0];
                        Model.BillingAddressID = SelectedBillingAddress.AddressID;
                        IsBillingAddressSelected = true;
                        if (Model.NeedShippingAddress)
                        {
                            SelectedShippingAddress = CustomerData.CustomerAddresses[0];
                            Model.ShippingAddressID = SelectedShippingAddress.AddressID;
                            IsShippingAddressSelected = true;
                        }
                    }
                }
            }
        }
    }
    private async Task HandelAddNewCustomerButtonClick(int dropdownMode)
    {
        await childCustomerModal.OpenCustomerModal();
    }
    private async Task HandleNewCustomerAdded(IdnValuePair customer)
    {
        Model.CustomerEntityID = customer.ID;
        Model.CustomerName = customer.Value;
        await CustomerDropdown.RefreshList();
        DropdownItemSelectedCallbackModel customerSelectedModel = new() { ID = customer.ID, Value = customer.Value };
        await HandleCustomerSelected(customerSelectedModel);
    }
    private async Task HandleCustomerUpdateButtonClick(int customerEntityID)
    {
        await childCustomerModal.OpenCustomerModal(customerEntityID);
    }
    private async Task<CustomerOrSupplierDataModel> FetchCustomerData(int customerEntityID)
    {
        var customerData = await API.GetAsync<CustomerOrSupplierDataModel>($"customer/get-customer-details/{customerEntityID}", true);
        return customerData;
    }

    #region Customer Address

    private AddressView SelectedBillingAddress = new();
    private AddressView SelectedShippingAddress = new();
    private bool IsNeedShippingAddress = false;
    private bool IsBillingAddressSelected = false;
    private bool IsShippingAddressSelected = false;
    private int AddressType = 0;
    private string? StatePointerEvent = "pointer-events:none";
    private string? CityPointerEvent = "pointer-events:none";
    private bool IsAddressEditMode = false;
    private int CurrentAddressIndex = 0;
    private async Task OpenAddressModal()
    {
        await JS.InvokeVoidAsync("ShowModal", "address-add-modal");
    }
    private async Task CloseAddressModal()
    {
        await JS.InvokeVoidAsync("HideModal", "address-add-modal");
        StatePointerEvent = CityPointerEvent = "pointer-events:none";
    }
    private async Task AddNewCustomerAddress(int addressType)
    {
        if (Model.CustomerEntityID != null)
        {
            NewAddressModel.CountryID = QuotationSettings.CountryID;
            NewAddressModel.CountryName = QuotationSettings.CountryName;
            StatePointerEvent = "";
            await AddressStateDropdown.RefreshList(NewAddressModel.CountryID);
            AddressType = addressType;
            await OpenAddressModal();
        }
        else
        {
            await JS.ErrorMessage("Please choose a customer, after that you can add address");
        }
    }
    private async Task EditCustomerAddress(AddressView address)
    {
        CurrentAddressIndex = CustomerData.CustomerAddresses.IndexOf(address);
        NewAddressModel = new();
        var addressModel = await GetCustomerAddressModel(address.AddressID);
        if (addressModel != null)
        {
            NewAddressModel = addressModel;
            IsAddressEditMode = true;
            StatePointerEvent = "";
            CityPointerEvent = "";
            await AddressStateDropdown.RefreshList(NewAddressModel.CountryID);
            await AddressCityDropdown.RefreshList(NewAddressModel.CityID);
            await OpenAddressModal();
        }
    }
    private async Task<AddressModel> GetCustomerAddressModel(int addressID)
    {
        return await API.GetAsync<AddressModel>($"customer/get-customer-address/{addressID}", true);
    }
    private async Task<AddressView> GetCustomerAddressView(int addressID)
    {
        return await API.GetAsync<AddressView>($"customer/get-customer-address-view/{addressID}", true);
    }
    private async Task SaveCustomerAddress()
    {
        NewAddressModel.EntityID = Model.CustomerEntityID;

        var res = await API.PostAsync<AddressAddResultModel, AddressModel>("customer/save-customer-address", NewAddressModel);
        if (res != null)
        {
            if (IsAddressEditMode)
            {
                CustomerData.CustomerAddresses[CurrentAddressIndex] = await GetCustomerAddressView(res.AddressID);
                if (SelectedBillingAddress.AddressID == NewAddressModel.AddressID)
                {
                    SelectedBillingAddress = CustomerData.CustomerAddresses[CurrentAddressIndex];
                    IsBillingAddressSelected = true;
                }

                if (SelectedShippingAddress.AddressID == NewAddressModel.AddressID)
                {
                    SelectedShippingAddress = CustomerData.CustomerAddresses[CurrentAddressIndex];
                    IsShippingAddressSelected = true;
                }
            }
            else
            {
                var address = await GetCustomerAddressView(res.AddressID);
                if (address != null)
                {
                    CustomerData.CustomerAddresses.Add(address);
                    if (AddressType == (int)AddressTypes.Billing)
                    {
                        SelectedBillingAddress = address;
                        IsBillingAddressSelected = true;
                        Model.BillingAddressID = address.AddressID;
                    }
                    if (AddressType == (int)AddressTypes.Shipping)
                    {
                        SelectedShippingAddress = address;
                        IsShippingAddressSelected = true;
                        Model.ShippingAddressID = address.AddressID;
                    }
                    AddressType = 0;
                    NewAddressModel = new();
                }
            }
            await CloseAddressModal();
            NewAddressModel = new()
                {
                    CountryID = QuotationSettings.CountryID,
                    CountryName = QuotationSettings.CountryName
                };
        }

    }
    private void HandleCustomerAddressSelected(AddressView address, bool isBillingAddress = true)
    {
        if (isBillingAddress)
        {
            Model.BillingAddressID = address.AddressID;
            SelectedBillingAddress = address;
            IsBillingAddressSelected = true;
        }
        else
        {
            Model.ShippingAddressID = address.AddressID;
            SelectedShippingAddress = address;
            IsShippingAddressSelected = true;
        }
    }
    private void HandleCustomerAddressChangeClicked(bool isBillingAddress = true)
    {
        if (isBillingAddress)
            IsBillingAddressSelected = false;
        else
            IsShippingAddressSelected = false;
    }
    private void HandleNeedShippingAddrssChecked(ChangeEventArgs e)
    {
        Model.NeedShippingAddress = Convert.ToBoolean(e.Value);
        if (Model.NeedShippingAddress)
        {
            if (Model.ShippingAddressID == null)
            {
                SelectedShippingAddress = CustomerData.CustomerAddresses[0];
                Model.ShippingAddressID = SelectedShippingAddress.AddressID;
                Model.NeedShippingAddress = true;
            }
            else
            {
                SelectedShippingAddress = CustomerData.CustomerAddresses.Where(address => address.AddressID == Model.ShippingAddressID).First();
                Model.NeedShippingAddress = true;
            }
        }
        else
        {
            SelectedShippingAddress = new();
            IsShippingAddressSelected = false;
            Model.ShippingAddressID = null;
        }
    }
    private async Task HandleAddressCountrySelected(DropdownItemSelectedCallbackModel data)
    {
        NewAddressModel.CountryID = data.ID;
        NewAddressModel.CountryName = data.Value;
        StatePointerEvent = "";
        NewAddressModel.StateID = null;
        NewAddressModel.State = null;
        NewAddressModel.CityID = null;
        NewAddressModel.City = null;
        if (NewAddressModel.CountryID != null)
        {
            await AddressStateDropdown.RefreshList(NewAddressModel.CountryID);
        }
    }
    private async Task HandleAddressStateSelected(DropdownItemSelectedCallbackModel data)
    {
        NewAddressModel.StateID = data.ID;
        NewAddressModel.State = data.Value;
        NewAddressModel.CityID = null;
        NewAddressModel.City = null;
        if (NewAddressModel.StateID != null)
        {
            await AddressCityDropdown.RefreshList(NewAddressModel.StateID);
            CityPointerEvent = "";
        }
    }
    private void HandleAddressCitySelected(DropdownItemSelectedCallbackModel data)
    {
        NewAddressModel.CityID = data.ID;
        NewAddressModel.City = data.Value;
    }

    #endregion

    #region Mail Recipient

    private CustomerContactPersonModel NewContactPersonModel = new();
    private async Task CloseCustomerContactPersonModal()
    {
        await JS.InvokeVoidAsync("HideModal", "contact-person-add-modal");
    }
    private async Task OpenCustomerContactPersonModal()
    {
        await JS.InvokeVoidAsync("ShowModal", "contact-person-add-modal");
    }
    public async Task SaveMailRecipient()
    {
        NewContactPersonModel.CustomerEntityID = Model.CustomerEntityID;

        var res = await API.PostAsync<ContactPersonAddResultModel, CustomerContactPersonModel>("customer/save-contact-person", NewContactPersonModel);
        if (res != null)
        {
            Model.MailReciepients = Model.MailReciepients ?? new();
            CustomerData.MailReceipients.Add(new()
                {
                    EntityID = res.EntityID,
                    EmailAddress = res.EmailAddress
                });

            Model.MailReciepients.Add(new QuotationMailRecipient()
                {
                    EntityID = res.EntityID,
                });
        }
        NewContactPersonModel = new();
        await CloseCustomerContactPersonModal();
    }
    private void HandleMailReciepientsSelectAllClicked(ChangeEventArgs e)
    {
        Model.MailReciepients = new();
        if (Convert.ToBoolean(e.Value))
            CustomerData.MailReceipients
            .ForEach(mailReceipient =>
                Model.MailReciepients
                .Add(new() { EntityID = mailReceipient.EntityID }));
    }
    private void HandleMailReciepientSelected(ChangeEventArgs e, MailRecipentsModel mailReciepient)
    {
        Model.MailReciepients = Model.MailReciepients ?? new();
        if (Convert.ToBoolean(e.Value))
            Model.MailReciepients.Add(new() { EntityID = mailReciepient.EntityID });
        else
            Model.MailReciepients.Remove(Model.MailReciepients.Where(MR => MR.EntityID == mailReciepient.EntityID).First());
    }

    #endregion

    #endregion

    #region Currency

    private void HandleCurrencySelected(DropdownItemSelectedCallbackModel currency)
    {
        Model.CurrencyID = currency.ID;
        Model.CurrencyName = currency.Value;
    }

    #endregion

    #region Place Of Supply

    private async Task HandlePlaceOfSupplySelected(DropdownItemSelectedCallbackModel placeOfSupply)
    {
        Model.PlaceOfSupplyID = placeOfSupply.ID;
        Model.PlaceOfSupplyName = placeOfSupply.Value;
        await GetUpdatedQuotationItemTaxBasedOnPlaceOfSupplyChange();
    }
    private async Task GetUpdatedQuotationItemTaxBasedOnPlaceOfSupplyChange()
    {
        if (Model.PlaceOfSupplyID is not null)
        {
            UpdateItemVariantsPostRequestModel postModel = new() { PlaceOfSupplyID = Model.PlaceOfSupplyID.Value };
            postModel.ItemVariantIDs = Model.QuotationItems.Select(qi => Convert.ToInt32(qi.ItemVariantID)).ToList();
            var updatedQuotationItems = await API.PostAsync<List<QuotationItemModelNew>, UpdateItemVariantsPostRequestModel>($"crm/get-updated-quotation-items", postModel);
            if (updatedQuotationItems is not null)
                HandelQuotationItemUpdation(updatedQuotationItems);
        }
    }
    private void HandelQuotationItemUpdation(List<QuotationItemModelNew> updateQuotationItems)
    {
        foreach (var updatedQuotationItem in updateQuotationItems)
        {
            var existingQuotationItem = Model.QuotationItems.Where(qi => qi.ItemVariantID == updatedQuotationItem.ItemVariantID).FirstOrDefault();
            if (existingQuotationItem is not null)
            {
                int rowIndex = Model.QuotationItems.IndexOf(existingQuotationItem);
                updatedQuotationItem.Quantity = existingQuotationItem.Quantity;
                updatedQuotationItem.Rate = existingQuotationItem.Rate;
                Model.QuotationItems[rowIndex] = updatedQuotationItem;
                HandleQuotationItemCalculations(Model.QuotationItems[rowIndex]);
            }
        }
    }
    private async Task HandlePlaceOfSupplyDataRefreshBasedOnCustomer()
    {
        if (QuotationID == 0 && EnquiryID > 0 || QuotationID > 0)
        {
            await PlaceOfSupplyDropdown.RefreshList(CustomerData.CountryID);
        }
    }

    #endregion

    #region Quotation Item

    private int currentQuotationItemIndex = -1;
    private bool isAnyRowInEditMode = false;
    private async Task HandleQuotationItemSelected(DropdownItemSelectedCallbackModel itemModel, QuotationItemModelNew quotationItem)
    {
        if (Model.CustomerEntityID is null)
        {
            await JS.ErrorMessage("Please choose customer for the quotation");
            return;
        }
        // if (Model.PlaceOfSupplyID is null)
        // {
        //     await JS.ErrorMessage("Please choose place of supply for the quotation");
        //     return;
        // }

        if (Model.QuotationItems.Count > 0)
        {
            QuotationItemModelNew? existingItem = null;
            existingItem = Model.QuotationItems
                .Where(i => i.ItemVariantID == itemModel.ID)
                .FirstOrDefault();

            if (existingItem != null)
            {
                await JS.ErrorMessage("Item alredy added to the list, please choose a different one");
                return;
            }
        }

        quotationItem.ItemVariantID = itemModel.ID;
        quotationItem.ItemName = itemModel.Value;
        if (quotationItem.ItemVariantID is not null)
        {
            quotationItem = await FetchQuotationItemDetails(quotationItem.ItemVariantID.Value);
            HandleQuotationItemCalculations(quotationItem);
            if (currentQuotationItemIndex > -1)
                Model.QuotationItems[currentQuotationItemIndex] = quotationItem;
            else
                Footer = quotationItem;
        }
    }
    private async Task HandleQuotationItemQuantityChange(QuotationItemModelNew quotationItem, ChangeEventArgs e)
    {
        quotationItem.Quantity = Convert.ToInt32(e.Value);
        // if (quotationItem.IsGoods && quotationItem.Quantity > quotationItem.CurrentStock)
        // {
        //     await JS.ErrorMessage($"The entered stock quantity for the item is not available(Available stock :{quotationItem.CurrentStock})");
        //     quotationItem.Quantity = 0;
        //     return;
        // }
        HandleQuotationItemCalculations(quotationItem);
    }
    private void HandlequotationItemRateChange(QuotationItemModelNew quotationItem, ChangeEventArgs e)
    {
        quotationItem.Rate = Convert.ToDecimal(e.Value);
        HandleQuotationItemCalculations(quotationItem);
    }
    private void HandlequotationItemDiscountChange(QuotationItemModelNew quotationItem, ChangeEventArgs e)
    {
        quotationItem.Discount = Convert.ToDecimal(e.Value);
        HandleQuotationItemCalculations(quotationItem);
    }
    private async Task HandleQuotationItemTaxCategorySelected(DropdownItemSelectedCallbackModel taxCategory, QuotationItemModelNew quotationItem)
    {
        quotationItem.TaxCategoryID = taxCategory.ID;
        quotationItem.TaxCategoryName = taxCategory.Value;
        if (quotationItem.TaxCategoryID is not null)
        {
            var taxCategoryDetails = await FetchTaxCategoryDetails(quotationItem.TaxCategoryID.Value);
            if (taxCategoryDetails is not null)
            {
                quotationItem.TaxCategoryID = taxCategoryDetails.TaxCategoryID;
                quotationItem.TaxCategoryName = taxCategoryDetails.TaxCategoryName;
                quotationItem.TaxPercentage = taxCategoryDetails.TaxPercentage;
                quotationItem.TaxCategoryItems = taxCategoryDetails.TaxCategoryItems;
                HandleQuotationItemCalculations(quotationItem);
            }
        }
    }
    private async Task HandleQuotationItemEditClick(QuotationItemModelNew quotationItem)
    {
        if (isAnyRowInEditMode)
        {
            await JS.ErrorMessage("There is already a row in edit mode, please complete it first");
            return;
        }

        quotationItem.IsRowInEditMode = true;
        isAnyRowInEditMode = true;
        await Task.Delay(50);
    }
    private string? ValidateQuotationItem(QuotationItemModelNew quotationItem)
    {
        string? errorMessage = "";
        var validationContext = new ValidationContext(quotationItem, serviceProvider: null, items: null);
        var validationResults = new List<ValidationResult>();
        bool isValid = Validator.TryValidateObject(quotationItem, validationContext, validationResults, validateAllProperties: true);
        if (validationResults is not null)
        {
            foreach (var validationItem in validationResults)
            {
                errorMessage += validationItem.ErrorMessage + "\n";
            }
        }
        // if (quotationItem.TaxPreferenceTypeID == (int)TaxPreferences.Taxable && quotationItem.TaxCategoryID is null)
        //     errorMessage += "Please choose a tax category for the item \n";
        // if (quotationItem.IsGoods && quotationItem.Quantity > quotationItem.CurrentStock)
        //     errorMessage += "Available stock for '" + quotationItem.ItemName + "' is " + quotationItem.CurrentStock + '\n';
        return errorMessage;
    }
    private async Task HandleQuotationItemUpdateClick(QuotationItemModelNew quotationItem)
    {
        if (quotationItem.ItemVariantID == null)
        {
            await JS.ErrorMessage("Please choose a service first");
            return;
        }

        if (quotationItem.Quantity <= 0)
        {
            await JS.ErrorMessage("Quantity for the service should be above zero");
            return;
        }

        var errorMessage = ValidateQuotationItem(quotationItem);
        if (string.IsNullOrEmpty(errorMessage))
        {
            quotationItem.IsRowInEditMode = false;
            isAnyRowInEditMode = false;
        }
        else
        {
            await JS.ErrorMessage(errorMessage);
        }
    }
    private async Task HandleAddFooterButtonClick()
    {
        if (Footer.ItemVariantID == null)
        {
            await JS.ErrorMessage("Please choose a service first");
            return;
        }

        if (Footer.Quantity <= 0)
        {
            await JS.ErrorMessage("Quantity for the service should be above zero");
            return;
        }

        var errorMessage = ValidateQuotationItem(Footer);

        if (!string.IsNullOrEmpty(errorMessage))
        {
            errorMessage = $"Validation error(s) for '{Footer.ItemName}' \n" + errorMessage;
            await JS.ErrorMessage(errorMessage);
        }
        Model.QuotationItems.Add(Footer);
        Footer = new()
            {
                IsRowInEditMode = true
            };
        HandleQuotationSummaryCalculation();
        HandleQuotationItemsTaxCategoryItemGrouping();
    }
    private async Task HandleQuotationItemRemoveClick(QuotationItemModelNew quotationItem)
    {
        if (await JS.Confirm("Cofirm", "Are you sure you want to remove the quotation item '" + quotationItem.ItemName + "'", SweetAlertMessageType.question, "Yes, Remove", "No, Don't Remove"))
        {
            Model.QuotationItems.Remove(quotationItem);
        }
        HandleQuotationSummaryCalculation();
        HandleQuotationItemsTaxCategoryItemGrouping();
    }

    #endregion

    #region Calculation

    private void HandleWholeQuotationItemsCalculation()
    {
        foreach (var quotationItem in Model.QuotationItems)
            HandleQuotationItemCalculations(quotationItem);
    }
    private void HandleQuotationItemCalculations(QuotationItemModelNew quotationItem)
    {
        quotationItem.TotalAmount = quotationItem.Quantity * quotationItem.Rate;
        quotationItem.NetAmount = quotationItem.TotalAmount - quotationItem.Discount;
        quotationItem.TaxAmount = quotationItem.NetAmount * (quotationItem.TaxPercentage / 100);
        quotationItem.GrossAmount = quotationItem.NetAmount + quotationItem.TaxAmount;
        quotationItem.TaxCategoryItems.ForEach(qi => qi.TaxAmount = quotationItem.NetAmount * (qi.Percentage / 100));
        HandleQuotationSummaryCalculation();
        HandleQuotationItemsTaxCategoryItemGrouping();
    }
    private void HandleQuotationSummaryCalculation()
    {
        Model.TotalAmount = Model.QuotationItems.Sum(quotationItem => quotationItem.TotalAmount);
        Model.TotalDiscount = Model.QuotationItems.Sum(quotationItem => quotationItem.Discount);
        Model.NetAmount = Model.QuotationItems.Sum(quotationItem => quotationItem.NetAmount);
        Model.TaxAmount = Model.QuotationItems.Sum(quotationItem => quotationItem.TaxAmount);
        Model.GrossAmount = Model.QuotationItems.Sum(quotationItem => quotationItem.GrossAmount);
    }

    #endregion

    #region Item Variant

    private async Task<QuotationItemModelNew> FetchQuotationItemDetails(int itemModelID)
    {
        ItemSelectedPostModel postModel = new()
            {
                ItemVariantID = itemModelID,
                PlaceOfSupplyID = Convert.ToInt32(Model.PlaceOfSupplyID),
            };
        var quotationItem = await API.PostAsync<QuotationItemModelNew, ItemSelectedPostModel>($"crm/get-quotation-item-details", postModel);
        return quotationItem;
    }
    private async Task HandleAddNewQuotationItemButtonClick(int dropdownMode, int rowIndex = -1)
    {
        currentQuotationItemIndex = rowIndex;
        await childItemModal.OpenItemModal();
    }
    private async Task HandleNewItemAdded(IdnValuePair item)
    {
        await FooterItemDropdown.RefreshList();
        var quotationItem = await FetchQuotationItemDetails(item.ID);
        HandleQuotationItemCalculations(quotationItem);
        if (currentQuotationItemIndex == -1)
            Model.QuotationItems.Add(quotationItem);
        else
            Model.QuotationItems[currentQuotationItemIndex] = quotationItem;
    }

    #endregion

    #region Tax Category

    private List<TaxCategoryItemModel> GroupedTaxCategoryItems = new();
    private async Task<TaxCategorySelectedGetModelNew> FetchTaxCategoryDetails(int taxCategoryID)
    {
        var result = await API.GetAsync<TaxCategorySelectedGetModelNew>($"settings/get-tax-category-details/{taxCategoryID}", true);
        return result;
    }
    private async Task HandelAddNewTaxCategoryButtonClick(int dropdownMode, int rowIndex = -1)
    {
        currentQuotationItemIndex = rowIndex;
        await childTaxCategory.OpenTaxCategoryModal();
    }
    private async Task HandleNewTaxCategoryAdded(IdnValuePair taxCategory, QuotationItemModelNew quotationItem)
    {
        await FooterTaxCategoryDropdown.RefreshList();
        await RowTaxCategoryDropdown.RefreshList();
        var taxCategoryDetails = await FetchTaxCategoryDetails(taxCategory.ID);
        if (taxCategoryDetails is not null)
        {
            quotationItem.TaxCategoryID = taxCategoryDetails.TaxCategoryID;
            quotationItem.TaxCategoryName = taxCategoryDetails.TaxCategoryName;
            quotationItem.TaxPercentage = taxCategoryDetails.TaxPercentage;
            quotationItem.TaxCategoryItems = taxCategoryDetails.TaxCategoryItems;
            HandleQuotationItemCalculations(quotationItem);
        }
    }
    private void HandleQuotationItemsTaxCategoryItemGrouping()
    {
        GroupedTaxCategoryItems =
            Model.QuotationItems
            .Where(qi => qi.TaxPreferenceTypeID == (int)TaxPreferences.Taxable)
            .SelectMany(item => item.TaxCategoryItems)
            .ToList();

        GroupedTaxCategoryItems =
            GroupedTaxCategoryItems
            .GroupBy(item => item.TaxCategoryItemID)
            .Select(group => new TaxCategoryItemModel
                {
                    TaxCategoryItemID = group.Key,
                    TaxCategoryItemName = group.First().TaxCategoryItemName,
                    Percentage = group.First().Percentage,
                    TaxAmount = (Model.NetAmount * (group.First().Percentage / 100))
                }).ToList();
    }

    #endregion

    #region Quotation FollowUp Assignees

    private void HandleAssigneesSelectAllClicked(ChangeEventArgs e)
    {
        Model.QuotationAssignees = new();
        if (Users.Count > 0)
        {
            if (Convert.ToBoolean(e.Value))
            {
                Model.QuotationAssignees = new();
                Users.ForEach(user =>
                    Model.QuotationAssignees.Add(new() { EntityID = user.ID }));
            }
        }
    }
    private void HandleAssigneeSelected(ChangeEventArgs e, IdnValuePair user)
    {
        Model.QuotationAssignees = Model.QuotationAssignees ?? new();
        if (Convert.ToBoolean(e.Value))
            Model.QuotationAssignees.Add(new() { EntityID = user.ID });
        else
            Model.QuotationAssignees.Remove(Model.QuotationAssignees.Where(assignee => assignee.EntityID == user.ID).First());
    }

    #endregion

    #region Main Functions

    private async Task ShowErrorMessage()
    {
        string? errorMessage = "";
        var validationContext = new ValidationContext(Model, serviceProvider: null, items: null);
        var validationResults = new List<ValidationResult>();
        bool isValid = Validator.TryValidateObject(Model, validationContext, validationResults, validateAllProperties: true);
        if (validationResults is not null)
        {
            foreach (var validationItem in validationResults)
            {
                errorMessage += validationItem.ErrorMessage + "\n";
            }
        }
        await JS.ErrorMessage(errorMessage);
    }
    private async Task SaveQuotation()
    {
        if (isAnyRowInEditMode)
        {
            await JS.ErrorMessage("There is a row in edit mode, please clear it");
            return;
        }
        else if (Model.QuotationItems.Count == 0)
        {
            await JS.ErrorMessage("Please add items for the quotation");
            return;
        }


        if (await JS.Confirm("Confirm", "Would you like to proceed with generating the quotation PDF now, or would you prefer to do so later?", SweetAlertMessageType.question, "Generate now", "Later"))
        {
            Model.GenerateQuotationPdf = true;
            var result = await API.PostAsync<MailDetailsModel, QuotationModelNew>("crm/save-quotation", Model);
            if (result != null)
            {
                Model.QuotationID = result.ID;
                await Task.Delay(100);
                await modalPdfSendConfirmation.OpenSendMailConfirmationModal(result);
            }
        }
        else
        {
            var result = await API.PostAsync<QuotationSuccessModel, QuotationModelNew>("crm/save-quotation", Model);
            if (result != null)
                Nav.NavigateTo($"quotation-view/{result.QuotationID}");
        }
    }
    private async Task ConvertEnquiry()
    {
        IsBillingAddressSelected = false;
        IsShippingAddressSelected = false;
        Model = await API.GetAsync<QuotationModelNew>($"crm/convert-enquiry-to-quotation/{EnquiryID}", true);
        if (Model.CustomerEntityID is not null)
        {
            DropdownItemSelectedCallbackModel customer = new() { ID = Model.CustomerEntityID, Value = Model.CustomerName };
            await HandleCustomerSelected(customer, false);
        }
    }
    private async Task LoadQuotaionEntry()
    {
        Model = await API.GetAsync<QuotationModelNew>($"crm/get-quotation/{QuotationID}", true);
        if (Model.CustomerEntityID is not null)
        {
            DropdownItemSelectedCallbackModel customer = new() { ID = Model.CustomerEntityID, Value = Model.CustomerName };
            await HandleCustomerSelected(customer, false);
            IsBillingAddressSelected = true;
            SelectedBillingAddress = CustomerData.CustomerAddresses.Where(adrs => adrs.AddressID == Model.BillingAddressID).First();

            if (Model.ShippingAddressID != null)
            {
                IsShippingAddressSelected = true;
                SelectedShippingAddress = CustomerData.CustomerAddresses.Where(adrs => adrs.AddressID == Model.ShippingAddressID).First();
                //IsNeedShippingAddress = true;
            }
        }
        HandleQuotationSummaryCalculation();
        HandleQuotationItemsTaxCategoryItemGrouping();
    }
    private async Task Cancel()
    {
        if (await JS.Confirm("Confirm", "Are you sure you want to go back", SweetAlertMessageType.question, "Yes, Leave", "No, Cancel"))
        {
            if (QuotationID == 0 && EnquiryID > 0)
            {
                Nav.NavigateTo($"enquiry-view/{EnquiryID}");
            }
            else if (QuotationID > 0 && EnquiryID == 0)
            {
                Nav.NavigateTo($"quotation-view/{QuotationID}");
            }
            else
            {
                Nav.NavigateTo("quotations");
            }
        }
    }
    private async Task ClearQuotationModel()
    {
        if (Model.QuotationID == 0 && await JS.Confirm("Confirm?", "Are you sure you want to clear this datas.?", SweetAlertMessageType.question, "Yes, Clear", "No, Cancel"))
        {
            Model = new();
            Footer = new();
            SelectedBillingAddress = new();
            SelectedShippingAddress = new();
            IsBillingAddressSelected = false;
            IsShippingAddressSelected = false;
            CustomerData = new();
        }
    }

    #endregion

    #region Business Type

    private ModalBusinessType childBusinessTypeModal = new();
    private async Task HandleBusinessTypeSelected(DropdownItemSelectedCallbackModel business)
    {
        Model.BusinessTypeID = business.ID;
        Model.BusinessTypeName = business.Value;
    }
    private async Task HandelAddNewBusinessTypeButtonClick(int dropdownMode)
    {
        await childBusinessTypeModal.OpenBusinessTypeModal();
    }

    private async Task HandleNewBusinessTypeAdded(IdnValuePair business)
    {
        Model.BusinessTypeID = business.ID;
        Model.BusinessTypeName = business.Value;
    }
    #endregion

    #region Created For

    private async Task HandleCretedForSelected(DropdownItemSelectedCallbackModel staff)
    {
        Model.QuotationCreatedFor = staff.ID;
        Model.StaffName = staff.Value;
        var phoneNo = await API.GetAsync<IdnValuePair>($"crm/get-staff-phone-number/{staff.ID}");
        if (phoneNo != null)
        {
            Model.StaffPhoneNo = phoneNo.Value;
        }
    }
    #endregion
}
