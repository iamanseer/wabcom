@page "/package-purchase"
@using PB.CRM.Model.Enum;
@using PB.Shared.Enum.Court;
@using PB.Shared.Models.Court;

<PageLayoutNew>
    <EditForm Model="Model" OnValidSubmit="SaveCustomerPackage" autocomplete="off">
        <DataAnnotationsValidator />
        <div class="main-container container-fluid">
            <div class="row page-header ">
                <div class="col-12">
                    <div class="card">
                        <div class="card-header">
                            <h5 style="margin-bottom: 0 !important;">Purchase Package</h5>
                        </div>
                        <div class="card-body">
                            <div class="row">
                                <DropdownSelect DropdownID="@ClientDropdownSelect"
                                                DivClass="col-md-6"
                                                Label="Customer"
                                                IsRequired="true"
                                                IsAddOptionNeed="false"
                                                ReadDataOnSearch="true"
                                                Mode="(int)DropdownModes.Customer"
                                                ModeGroup="(int)DropdownModes.CommonSearch"
                                                SelectedItem="@(new DropdownSelectedItemModel(){ID = Model.EntityID, Value=Model.CustomerName})"
                                                ItemSelected="ItemSelected"
                                                PlaceHolder="Select Customer" ValidationFor="()=>Model.EntityID"/>
                               @* @if (Model.ExistingPackageName != null)
                                {
                                    <div class="col-md-4">
                                        <div class="form-group">
                                            <label class="form-label mt-0 me-1 text-align-left" style="text-align:left">Existing Package Name :</label>
                                            <input type="text" class="form-control" label="" @bind="Model.ExistingPackageName" disabled>

                                        </div>
                                    </div>

                                    <div class="col-md-4">
                                        <div class="form-group">
                                            <label class="form-label mt-0 me-1 text-align-left" style="text-align:left">Existing EndDate :</label>
                                            <input type="date" class="form-control" label="" @bind="Model.ExistingEndDate" disabled>

                                        </div>
                                    </div>
                                    <div class="col-md-4">
                                        <div class="form-group">
                                            <label class="form-label mt-0 me-1 text-align-left" style="text-align:left">Existing Package Fee :</label>
                                            <input type="text" class="form-control" label="" @bind="Model.ExistingFee" disabled>

                                        </div>
                                    </div>

                                }*@

                                <DropdownSelect DropdownID="@PackageDropdownSelect"
                                                DivClass="col-md-6"
                                                Label="Package"
                                                IsRequired="true"
                                                IsAddOptionNeed="false"
                                                ReadDataOnSearch="true"
                                                Mode="(int)DropdownModes.CourtPackage"
                                                ModeGroup="(int)DropdownModes.CommonSearch"
                                                SelectedItem="@(new DropdownSelectedItemModel(){ID = Model.CourtPackageID, Value=Model.PackageName})"
                                                ItemSelected="ItemSelected"
                                                PlaceHolder="Select Package" ValidationFor="()=>Model.CourtPackageID"/>

                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label class="form-label mt-0 me-1 text-align-left" style="text-align:left">Start Date :</label>
                                        <input type="date" class="form-control" @bind="Model.StartDate" @onfocusout="HandleDateChange">

                                    </div>
                                </div>

                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label class="form-label mt-0 me-1 text-align-left" style="text-align:left">End Date :</label>
                                        <input type="date" class="form-control" label="" @bind="Model.EndDate" disabled>

                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label class="form-label mt-0 me-1" style="text-align:left;">Purchase code :
                                            <span class="ms-2" style="color:red">*</span>
                                        </label>
                                        <input class="form-control" placeholder="" type="text" @onchange="OnPurchaseCodeChange" >
                                        @if(!IsPurchaseCodeValid)
                                        {
                                            <div class="validation-message">This purchase code is not available</div>
                                        }
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    <div class="form-group">
                                        <label class="form-label mt-0 me-1" style="text-align:left;">Payment
                                            <span class="ms-1" style="color:red">*</span>
                                        </label>
                                        <div class="pb-select form-control drop-down-focused" tabindex="0" data-bs-toggle="dropdown" id="enquiry-customer-drop-down-select" aria-expanded="false">
                                            <div class="pb-selected">@(Model.PaymentTypeID.HasValue?((PaymentTypes)Model.PaymentTypeID).ToString():"Select Payment Type")</div>
                                            <div class="dropdown-toggle"></div>
                                        </div>
                                        <ul class="dropdown-menu pb-select-container" role="menu" style="z-index: 999; min-width: 350px !important;" id="items-list-enquiry-customer-drop-down-select">
                                            <ul class="list-data" style="min-height:100px;" id="enquiry-customer-drop-down-select-ul">
                                                @foreach(var item in Enum.GetValues(typeof(PaymentTypes)))
                                                {
                                                       <li tabindex="0"><a @onclick="@(()=>Model.PaymentTypeID=(int)item)">@item.ToString()</a></li>                                         
                                                }
                                            </ul>
                                        </ul>
                                    </div>
                                    <ValidationMessage For="()=>Model.PaymentTypeID" />
                                </div>
                            </div>
                            <div class="modal-footer">
                                <button class="btn btn-primary" type="submit">Save</button>
                                <button class="btn btn-danger" type="button" @onclick="@(async ()=>await Cancel())">Cancel</button>
                            </div>


                        </div>
                    </div>
                </div>
            </div>
        </div>
    </EditForm>


</PageLayoutNew>



@code {
    private CourtPackagePurchaseModel Model = new();
    private ExistingCourtPackagePurchaseModel ExistingPackage = new();
    private ModalCustomer? customerChildModal;
    private string ClientDropdownSelect = "enquiry-customer-drop-down-select";
    private string PackageDropdownSelect = "package-drop-down-select";
    private string PaymentDropdownSelect = "payment-drop-down-select";
    private IntModel IDModel = new();
    bool IsPurchaseCodeValid;

    async Task OnPurchaseCodeChange(ChangeEventArgs e)
    {
        Model.PurchaseCode = e!=null?e.Value!=null?e.Value.ToString():null:null;
        if (!string.IsNullOrEmpty(Model.PurchaseCode))
            await ValidatePurchaseCode();
        else
            IsPurchaseCodeValid = false;
    }

    async Task ValidatePurchaseCode()
    {
        IsPurchaseCodeValid= await API.GetAsync<bool>($"court-package/check-purchase-code-availability/{Model.PurchaseCode}");
    }

    private async Task SaveCustomerPackage()
    {
        await ValidatePurchaseCode();
        if(IsPurchaseCodeValid)
        {
            var res = await API.PostAsync<BaseSuccessResponse, CourtPackagePurchaseModel>("court-package/save-court-customer-package", Model);
            if(res!=null)
            {
                await JS.SuccessMessage();
                Model = new();
            }
        }
    }

    private async Task Cancel()
    {
        if (await JS.Confirm("Confirm", "Are you sure you want to go back", SweetAlertMessageType.question, "Yes, Leave", "No, Cancel"))
        {
            Model = new();

        }
    }

    private async Task ItemSelected(DropdownItemSelectedCallbackModel data)
    {
        switch (data.DropdownMode)
        {
            case (int)DropdownModes.Customer:

                Model.EntityID = data.ID.Value;
                Model.CustomerName = data.Value;
                //ExistingPackage = await API.GetAsync<ExistingCourtPackagePurchaseModel>($"court-package/get-court-customer-existing-package/{Model.EntityID}", true);
                //if (ExistingPackage != null)
                //{
                //    Model.ExistingPackageName = ExistingPackage.ExistingPackageName;
                //    Model.ExistingEndDate = ExistingPackage.ExistingEndDate;
                //    Model.ExistingFee = ExistingPackage.ExistingFee;
                //}

                break;

            case (int)DropdownModes.CourtPackage:

                Model.CourtPackageID = data.ID;
                Model.PackageName = data.Value;
                IntModel postModel = new()
                    {
                        Id = Model.CourtPackageID,
                    };
                IDModel = await API.PostAsync<IntModel, IntModel>($"court-package/get-package-validity", postModel);
                if (IDModel != null)
                {
                    Model.EndDate = Model.StartDate.Value.AddMonths(IDModel.Id.Value);
                }
                break;
        }
    }

    private async Task AddNewItem(int mode)
    {
        switch (mode)
        {
            case (int)DropdownModes.Customer:
                await customerChildModal.AddNewCustomer();
                break;
        }
    }
    private async Task HandleDateChange()
    {
        IntModel postModel = new()
            {
                Id = Model.CourtPackageID,
            };
        IDModel = await API.PostAsync<IntModel, IntModel>($"court-package/get-package-validity", postModel);
        if (IDModel != null)
        {
            Model.EndDate = Model.StartDate.Value.AddMonths(IDModel.Id.Value);
        }
    }
}
