@page "/membership-packages"
@using PB.CRM.Model.Enum;
@using PB.Shared.Models;
@using PB.Shared.Models.Common;


<PageLayoutNew>
    <div class="main-container container-fluid">
        <div class="page-header">
            <div class="card">
                <div class="card-header py-2">
                    <ListPageHeader Settings="MembershipPackageSettings" OnFilterButtonClick="ApplyFilterTo" />  @*OnAddButtonClick="ShowPackageModal"*@
                </div>

                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table border text-nowrap text-md-nowrap table-hover mb-0 ">
                            <thead>
                                <tr>
                                    <th>SlNo</th>
                                    <th>@Localizer["Package Name"]</th>
                                    <th>@Localizer["Capacity"]</th>
                                    <th>@Localizer["Plan"]</th>
                                    <th>@Localizer["Fee"]</th>
                                    <th>@Localizer["TaxCategory"]</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in PackageListPageModel.Data.Select((data, index) => new { index, data }))
                                {
                                    <tr>
                                        <td>
                                            @((PackageListPageModel.PageIndex - 1) * PackageListPageModel.PageSize + 1 + item.index)
                                        </td>
                                        <td @onclick="@(()=>Nav.NavigateTo($"membersip-package-view/{item.data.PackageID}"))">
                                            @item.data.PackageName
                                        </td>
                                        <td @onclick="@(()=>Nav.NavigateTo($"membersip-package-view/{item.data.PackageID}"))">
                                            @item.data.Capacity
                                        </td>
                                        <td @onclick="@(()=>Nav.NavigateTo($"membersip-package-view/{item.data.PackageID}"))">
                                            @item.data.PlanName
                                        </td>
                                        <td>
                                            @item.data.Fee
                                        </td>
                                        <td>
                                            @item.data.TaxCategoryName
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                        <PaginationCustom PageSize="PackageListPageModel.PageSize" TotalCount="PackageListPageModel.TotalCount" TotalPages="PackageListPageModel.TotalPages" PageIndex="PackageListPageModel.PageIndex" LoadPageIndex="PageIndex" />
                    </div>
                </div>
            </div>
        </div>
    </div>
</PageLayoutNew>

<!--Memership Package Modal-->
<div class="modal fade" id="AddNewPackageModal">
    <div class="modal-dialog modal-dialog-centered text-center modal-dialog-scrollable" role="document">
        <div class="modal-content modal-content-demo">
            <div class="modal-header">
                <h6 class="modal-title fw-bold">Add Package</h6><button aria-label="Close" class="btn-close" data-bs-dismiss="AddNewFeeModal" @onclick="(async() =>await HidePackageModal())"><span aria-hidden="true">&times;</span></button>
            </div>
            <div class="modal-body">
                <EditForm Model="Package" OnValidSubmit="SavePackage" autocomplete="off">
                    <DataAnnotationsValidator />
                    <div class="row">
                        <div class="col-12">
                            <div class="form-group">
                                <FileUpload @ref="FileUpload" Label="Upload Package Image" MediaID="Package.MediaID" FolderName="package" />
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-group">
                                <label class="form-label mt-0 me-1 text-align-left" style="text-align:left">Package Name :</label>
                                <input type="text" class="form-control" label="Name" @bind="Package.PackageName" placeholder="Package name">
                                <ValidationMessage For="()=>Package.PackageName" />

                            </div>
                        </div>
                        <DropdownSelect DropdownID="@FeatureDropdownSelect"
                                        DivClass="col-md-6"
                                        Label="Capacity"
                                        IsRequired="true"
                                        IsAddOptionNeed="true"
                                        ReadDataOnSearch="true"
                                        Mode="(int)DropdownModes.Capacity"
                                        ModeGroup="(int)DropdownModes.CommonSearch"
                                        SelectedItem="@(new DropdownSelectedItemModel(){ID = Package.CapacityID, Value=Package.Capacity.ToString()})"
                                        ItemSelected="ItemSelected"
                                        PlaceHolder="Select Capacity"
                                        NewButtonText="New capacity"
                                        NewButtonClicked="AddNewItem" />
                        <ValidationMessage For="()=>Package.CapacityID" />
                    </div>
                    <div class="row">
                        <div class="col-md-12">
                            <div class="form-group">
                                <label class="form-label col-md-4">Description</label>
                                <textarea name="" class="textarea form-control" id="enquiry-description-text-area" rows="2" @bind="Package.PackageDescription"></textarea>
                                <ValidationMessage For="() => Package.PackageDescription" />
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <DropdownSelect DropdownID="@PlanDropdownSelect"
                                        DivClass="col-md-6"
                                        Label="Plan"
                                        IsRequired="true"
                                        IsAddOptionNeed="true"
                                        ReadDataOnSearch="true"
                                        Mode="(int)DropdownModes.Plan"
                                        ModeGroup="(int)DropdownModes.CommonSearch"
                                        SelectedItem="@(new DropdownSelectedItemModel(){ID = Package.PlanID, Value=Package.PlanName})"
                                        ItemSelected="ItemSelected"
                                        PlaceHolder="Select Plan"
                                        NewButtonText="New plan"
                                        NewButtonClicked="AddNewItem" />
                        <ValidationMessage For="()=>Package.PlanID" />
                        <DropdownSelect DropdownID="@TaxDropdownSelect"
                                        DivClass="col-md-6"
                                        Label="Tax Category"
                                        IsRequired="true"
                                        IsAddOptionNeed="false"
                                        ReadDataOnSearch="false"
                                        Mode="(int)DropdownModes.TaxCategory"
                                        ModeGroup="(int)DropdownModes.CommonSearch"
                                        SelectedItem="@(new DropdownSelectedItemModel(){ID = Package.TaxCategoryID, Value=Package.TaxCategoryName})"
                                        ItemSelected="ItemSelected"
                                        PlaceHolder="Select TaxCategory" />
                        <ValidationMessage For="()=>Package.TaxCategoryID" />
                    </div>

                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-group">
                                <label class="form-label mt-0 me-1 text-align-left" style="text-align:left">Fee :</label>
                                <input type="number" class="form-control" label="Name" @bind="Package.Fee" placeholder="Fee">
                                <ValidationMessage For="()=>Package.Fee" />
                            </div>
                        </div>

                    </div>
                    @*<div class="row">
                    <div class="col-md-3">
                    <label class="custom-control custom-checkbox">
                    <input type="checkbox" class="custom-control-input" name="example-checkbox1" value="option1" @bind="Package.IsCustom">
                    <span class="custom-control-label">IsCustom</span>
                    </label>
                    </div>
                    </div>*@

                    <div class="mt-2 border p-1 d-flex flex-row flex-wrap gap-1">

                        @foreach (var feartue in Features)
                        {
                            <div class="form-check form-check-inline bx-border">

                                <input class="form-check-input" type="checkbox" id="@("assignee-"+feartue.ID)" @onchange="(ChangeEventArgs e) => CheckboxClicked(e,feartue)" checked="@(Package.feature.Any(i=>i.ID==feartue.ID)?"checked":null)">

                                <label class="form-check-label ms-2" for="@("assignee-"+feartue.ID)">
                                    @feartue.Value
                                </label>
                            </div>
                        }
                    </div>
                    <div class="row">
                        <div class="col-md-12">
                            <div class="form-group">
                                <label class="form-label col-md-12">Package Features <span style="opacity:.5;">(Please add minimum 5 features for the package and each features should be seperated with </span><strong>"."</strong> )</label>
                                <textarea name="" class="textarea form-control" id="enquiry-description-text-area" rows="5" @bind="Package.PackageFeatures"></textarea>
                                <ValidationMessage For="() => Package.PackageFeatures" />
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-primary" type="submit">Save</button>
                        <button class="btn btn-danger" type="button" @onclick="@(async ()=>await Cancel())">Cancel</button>
                    </div>

                </EditForm>
            </div>


        </div>
    </div>
</div>

<!--End Memership Package Modal-->
<!--Capacity Modal-->
<div class="modal fade" id="AddNewCapacityModal">
    <div class="modal-dialog modal-dialog-centered text-center modal-dialog-scrollable" role="document">
        <div class="modal-content modal-content-demo">
            <div class="modal-header">
                <h6 class="modal-title fw-bold">Add Capacity</h6><button aria-label="Close" class="btn-close" data-bs-dismiss="AddNewCapacityModal" @onclick="(async() =>await HideCapacityModal())"><span aria-hidden="true">&times;</span></button>
            </div>
            <div class="modal-body">
                <EditForm Model="Capacity" OnValidSubmit="SaveCapacity" autocomplete="off">
                    <DataAnnotationsValidator />
                    <div class="row">
                        <div class="col-md">
                            <div class="form-group">
                                <label class="form-label mt-0 me-1" style="text-align:left">Capacity :</label>
                                <input type="text" class="form-control" label="Name" @bind="Capacity.Capacity" placeholder="Enter The Capacity">
                                <ValidationMessage For="()=>Capacity.Capacity" />
                            </div>
                            <div class="form-group">
                                <button class="btn btn-primary" type="submit">Save</button>
                                <button class="btn btn-primary" type="button" @onclick="@(async ()=>await CancelCapacity())">Cancel</button>
                            </div>
                        </div>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>
<!--End Capacity Modal-->
<!--Plan Modal-->
<div class="modal fade" id="AddNewPlanModal">
    <div class="modal-dialog modal-dialog-centered text-center modal-dialog-scrollable" role="document">
        <div class="modal-content modal-content-demo">
            <div class="modal-header">
                <h6 class="modal-title fw-bold">Add Plan</h6><button aria-label="Close" class="btn-close" data-bs-dismiss="AddNewPlanModal" @onclick="(async() =>await HidePlanModal())"><span aria-hidden="true">&times;</span></button>
            </div>
            <div class="modal-body">
                <EditForm Model="Plan" OnValidSubmit="SavePlan" autocomplete="off">
                    <DataAnnotationsValidator />
                    <div class="row">
                        <div class="col-md">
                            <div class="form-group">
                                <label class="form-label mt-0 me-1" style="text-align:left">Plan Name :</label>
                                <input type="text" class="form-control" label="Name" @bind="Plan.PlanName" placeholder="Plan Name">
                                <ValidationMessage For="()=>Plan.PlanName" />
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md">
                            <div class="form-group">
                                <label class="form-label mt-0 me-1" style="text-align:left">Month Count :</label>
                                <input type="number" class="form-control" label="MonthCount" @bind="Plan.MonthCount" placeholder="Month Count">
                                <ValidationMessage For="()=>Plan.MonthCount" />
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md">
                            <div class="form-group">
                                <button class="btn btn-primary" type="submit">Save</button>
                                <button class="btn btn-primary" type="button" @onclick="@(async ()=>await CancelPlan())">Cancel</button>
                            </div>
                        </div>

                    </div>
                </EditForm>

            </div>
        </div>
    </div>
</div>
<!--End Plan Modal-->
@code {
    [Parameter] public int FeeId { get; set; }
    private PagedListPostModelWithFilter ListPageSearchModel = new();
    private PagedList<MembershipPackageModel> PackageListPageModel = new();
    HeaderSettingsModel? MembershipPackageSettings;
    private MembershipPackageModel Package = new();
    private List<IdnValuePair> Features = new();

    private string FeatureDropdownSelect = "feature-drop-down-select";
    private string PlanDropdownSelect = "plan-drop-down-select";
    private string TaxDropdownSelect = "tax-drop-down-select";

    FileUpload FileUpload;


    #region Package List

    protected override async Task OnInitializedAsync()
    {
        MembershipPackageSettings = new()
            {
                Heading = "Membership Package",
                SearchPlaceHolder = "Search with package",
                NeedAddButton = true,
                AddButtonText = "Add Package ",
                SinglePageURL = "membership-package",
                NeedSortOption = false,

            };
        await LoadData();
    }
    private async Task LoadData()
    {
        PackageListPageModel = await API.PostAsync<PagedList<MembershipPackageModel>, PagedListPostModelWithFilter>("support/get-all-packages", ListPageSearchModel);
    }

    #region Search

    private async Task SearchByFee(PagedListPostModelWithFilter searchModel)
    {
        ListPageSearchModel = searchModel;
        await LoadData();
    }

    #endregion
    private async Task Edit(int packageId)
    {
        //Package = await API.GetAsync<MembershipPackageModel>($"support/get-package/{packageId}", true);
        //await ShowPackageModal();
        Nav.NavigateTo($"membership-package/{packageId}");
    }


    async Task Remove(int Id)
    {
        if (await API.DeleteAsync("support/delete-package", Id, true))
        {
            await JS.SuccessMessage("Deleted Successfully");
            await LoadData();
        }
    }


    private async Task PageIndex(int pageIndex)
    {
        ListPageSearchModel.PageIndex = pageIndex;
        await LoadData();
    }

    private async Task ApplyFilterTo(PagedListPostModelWithFilter? filterModel)
    {
        ListPageSearchModel = filterModel == null ? new() : filterModel;
        await LoadData();
    }

    #endregion


    #region Add Package Modal

    private async Task ShowPackageModal()
    {
        Features = await API.GetAsync<List<IdnValuePair>>($"support/get-all-features", true);
        await JS.InvokeVoidAsync("ShowModal", "AddNewPackageModal");
    }

    private async Task HidePackageModal()
    {
        await JS.InvokeVoidAsync("HideModal", "AddNewPackageModal");
    }

    private async Task SavePackage()
    {
        Package.MediaID = await FileUpload.UploadFile();
        var result = await API.PostAsync<BaseSuccessResponse, MembershipPackageModel>("support/save-package", Package);
        if (result != null)
        {
            Package = new MembershipPackageModel();
            await Task.Delay(100);
            await LoadData();
            await HidePackageModal();
        }

    }

    private async Task Cancel()
    {
        if (await JS.Confirm("Confirm", "Are you sure you want to go back", SweetAlertMessageType.question, "Yes, Leave", "No, Cancel"))
        {
            Package = new();
            await HidePackageModal();

        }
    }

    private async Task CheckboxClicked(ChangeEventArgs e, IdnValuePair list)
    {

        if ((Convert.ToBoolean(e.Value)))
        {
            Package.feature.Add(list);
        }
        else
        {
            Package.feature.Remove(Package.feature.Where(f => f.ID == list.ID).First());
        }
    }

    #endregion


    #region Dropdown Select

    private async Task ItemSelected(DropdownItemSelectedCallbackModel data)
    {
        switch (data.DropdownMode)
        {
            case (int)DropdownModes.Capacity:
                Package.CapacityID = data.ID;
                Package.Capacity = Convert.ToInt32(data.Value);
                break;
            case (int)DropdownModes.Plan:
                Package.PlanID = data.ID;
                Package.PlanName = data.Value;
                break;
            case (int)DropdownModes.TaxCategory:
                Package.TaxCategoryID = data.ID;
                Package.TaxCategoryName = data.Value;
                break;

        }
    }

    private async Task AddNewItem(int mode)
    {
        switch (mode)
        {
            case (int)DropdownModes.Plan:
                await ShowPlanModal();
                break;

            case (int)DropdownModes.Capacity:
                await ShowCapacitytModal();
                break;

        }
    }

    #endregion


    #region Add Capacity Modal
    private MembershipUserCapacityModel Capacity = new();

    private async Task ShowCapacitytModal()
    {
        await JS.InvokeVoidAsync("ShowModal", "AddNewCapacityModal");
    }

    private async Task HideCapacityModal()
    {
        await JS.InvokeVoidAsync("HideModal", "AddNewCapacityModal");
    }

    private async Task SaveCapacity()
    {

        var result = await API.PostAsync<UserCapacityAddResultModel, MembershipUserCapacityModel>("support/save-capacity", Capacity);
        if (result != null)
        {
            Package.CapacityID = result.CapacityID;
            Package.Capacity = result.Capacity;
            Capacity = new MembershipUserCapacityModel();
            await Task.Delay(100);
            await HideCapacityModal();
        }

    }

    private async Task CancelCapacity()
    {
        if (await JS.Confirm("Confirm", "Are you sure you want to go back", SweetAlertMessageType.question, "Yes, Leave", "No, Cancel"))
        {
            Capacity = new();
            await HideCapacityModal();

        }
    }
    #endregion


    #region Add Plan Modal
    private MembershipPlanModel Plan = new();
    private async Task ShowPlanModal()
    {
        await JS.InvokeVoidAsync("ShowModal", "AddNewPlanModal");
    }

    private async Task HidePlanModal()
    {
        await JS.InvokeVoidAsync("HideModal", "AddNewPlanModal");
    }
    private async Task SavePlan()
    {

        var result = await API.PostAsync<MembershipPlanAddResultModel, MembershipPlanModel>("support/save-plan", Plan);
        if (result != null)
        {
            Package.PlanID = result.PlanID;
            Package.PlanName = result.PlanName;
            Plan = new MembershipPlanModel();
            await Task.Delay(100);
            await LoadData();
            await HidePlanModal();
        }

    }

    private async Task CancelPlan()
    {
        if (await JS.Confirm("Confirm", "Are you sure you want to go back", SweetAlertMessageType.question, "Yes, Leave", "No, Cancel"))
        {
            Plan = new();
            await HidePlanModal();

        }
    }
    #endregion




}
