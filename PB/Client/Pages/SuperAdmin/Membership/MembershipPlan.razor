@page "/membership-plan"
@attribute [Authorize(Roles = "MembershipManagment")]
@using PB.Shared.Models
@using PB.Shared.Models.Common;


<PageLayoutNew>
    <div class="main-container container-fluid">
        <div class="page-header">
            <div class="card">
                <div class="card-header py-2">

                    <ListPageHeader Settings="MembershipPlanSettings" OnFilterButtonClick="SearchByPlan" OnAddButtonClick="ShowPlanModal" />
                </div>

                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table border text-nowrap text-md-nowrap table-hover mb-0 ">
                            <thead>
                                <tr>
                                    <th>SlNo</th>
                                    <th>@Localizer["Plan"]</th>
                                    <th>@Localizer["MonthCount"]</th>
                                    @* <th>@Localizer["Account Name"]</th>
                                    <th>@Localizer["Category"]</th>
                                    <th>@Localizer["Status"]</th>
                                    <th>@Localizer["Reason"]</th>*@
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in PlanListPageModel.Data.Select((data, index) => new { index, data }))
                                {
                                    <tr>
                                        <td>
                                            @((PlanListPageModel.PageIndex - 1) * PlanListPageModel.PageSize + 1 + item.index)
                                        </td>
                                        <td>
                                            @item.data.PlanName
                                        </td>
                                        <td>
                                            @item.data.MonthCount
                                        </td>

                                        <td style="width:100px;">
                                            <div class="d-flex justify-content-center align-items-center">
                                                <ActionEdit Clicked="async () =>await Edit(item.data.PlanID)" />
                                                <ActionDelete Clicked="async () => await Remove(item.data.PlanID)" />
                                            </div>
                                        </td>
                                        @*
                                    @item.data.Name
                                    </td>
                                    <td>
                                    @item.data.CategoryID.ToString()
                                    </td>
                                    <td>
                                    @item.data.WhatsappTemplateStatus
                                    </td>
                                    <td>
                                    @item.data.StatusReason
                                    </td>*@
                                    </tr>
                                }
                            </tbody>
                        </table>
                        <PaginationCustom PageSize="PlanListPageModel.PageSize" TotalCount="PlanListPageModel.TotalCount" TotalPages="PlanListPageModel.TotalPages" PageIndex="PlanListPageModel.PageIndex" LoadPageIndex="PageIndex" />
                    </div>
                </div>
            </div>
        </div>
    </div>
</PageLayoutNew>

<div class="modal fade" id="AddNewPlanModal">
    <div class="modal-dialog modal-dialog-centered text-center modal-dialog-scrollable" role="document">
        <div class="modal-content modal-content-demo">
            <div class="modal-header">
                <h6 class="modal-title fw-bold">Add Plan</h6><button aria-label="Close" class="btn-close" data-bs-dismiss="AddNewPlanModal" @onclick="(async() =>await HidePlanModal())"><span aria-hidden="true">&times;</span></button>
            </div>
            <div class="modal-body">
                <EditForm Model="Plan" OnValidSubmit="SavePlan" autocomplete="off">
                    <DataAnnotationsValidator />
                    <div class="row">
                        <div class="col-md">
                            <div class="form-group">
                                <label class="form-label mt-0 me-1" style="text-align:left">Plan Name :</label>
                                <input type="text" class="form-control" label="Name" @bind="Plan.PlanName" placeholder="Plan Name">
                                <ValidationMessage For="()=>Plan.PlanName" />
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md">
                            <div class="form-group">
                                <label class="form-label mt-0 me-1" style="text-align:left">Month Count :</label>
                                <input type="number" class="form-control" label="MonthCount" @bind="Plan.MonthCount" placeholder="Month Count">
                                <ValidationMessage For="()=>Plan.MonthCount" />
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md">
                            <div class="form-group">
                                <button class="btn btn-primary" type="submit">Save</button>
                                <button class="btn btn-primary" type="button" @onclick="@(async ()=>await Cancel())">Cancel</button>
                            </div>
                        </div>

                    </div>
                </EditForm>

            </div>
        </div>
    </div>
</div>


@code {
    [Parameter] public int PlanId { get; set; }
    private PagedListPostModelWithFilter ListPageSearchModel = new();
    private PagedList<MembershipPlanModel> PlanListPageModel = new();
    HeaderSettingsModel? MembershipPlanSettings;

    private MembershipPlanModel Plan = new();



    protected override async Task OnInitializedAsync()
    {
        MembershipPlanSettings = new()
            {
                Heading = "Membership Plans",
                SearchPlaceHolder = "Search with Plan",
                NeedAddButton = true,
                AddButtonText = "Add Plan ",
                NeedSortOption=false,

            };
        await LoadData();
    }
    private async Task LoadData()
    {
        PlanListPageModel = await API.PostAsync<PagedList<MembershipPlanModel>, PagedListPostModelWithFilter>("support/get-all-plan", ListPageSearchModel);
    }

    #region Search

    private async Task SearchByPlan(PagedListPostModelWithFilter searchModel)
    {
        ListPageSearchModel = searchModel;
        await LoadData();
    }

    #endregion
    private async Task Edit(int PlanId)
    {
        Plan = await API.GetAsync<MembershipPlanModel>($"support/get-plan/{PlanId}", true);
        //await LoadFeature();
        await ShowPlanModal();
    }


    async Task Remove(int Id)
    {
        if (await API.DeleteAsync("support/delete-plan", Id, true))
        {
            await JS.SuccessMessage("Deleted Successfully");
            await LoadData();
        }
    }


    private async Task PageIndex(int pageIndex)
    {
        ListPageSearchModel.PageIndex = pageIndex;
        await LoadData();
    }

    private async Task ShowPlanModal()
    {
        await JS.InvokeVoidAsync("ShowModal", "AddNewPlanModal");
    }

    private async Task HidePlanModal()
    {
        await JS.InvokeVoidAsync("HideModal", "AddNewPlanModal");
    }

    #region AddNewPlan


    private async Task SavePlan()
    {

        var result = await API.PostAsync<MembershipPlanAddResultModel, MembershipPlanModel>("support/save-plan", Plan);
        if (result != null)
        {
            Plan = new MembershipPlanModel();
            await Task.Delay(100);
            await LoadData();
            await HidePlanModal();
        }

    }

    private async Task Cancel()
    {
        if (await JS.Confirm("Confirm", "Are you sure you want to go back", SweetAlertMessageType.question, "Yes, Leave", "No, Cancel"))
        {
            Plan = new();
            await HidePlanModal();

        }
    }
    #endregion


}


