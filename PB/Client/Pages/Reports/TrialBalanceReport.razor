@page "/trial-balance-report"
@using PB.Shared.Enum.Reports
@using PB.Shared.Models.Reports

<PageLayoutNew>
    <div class="main-container container-fluid">
        <div class="page-header d-flex justify-content-between">
            <h1 class="page-title">Reports</h1>
            <div class="btn-toolbar float-right mr-7">
                <div class="form-group">
                    <select name="country" id="timePeriodSelect" class="form-control form-select" @onchange="(ChangeEventArgs e) => HandleReportPeriodSelected(e)">
                        <option value="0">Choose</option>
                        @foreach (var reportPeriod in Enum.GetValues(typeof(ReportPeriods)))
                        {
                            if (PeriodTypeID == (int)reportPeriod)
                            {
                                <option value="@((int)reportPeriod)" selected>@reportPeriod.ToString().Replace('_', ' ')</option>
                            }
                            else
                            {
                                <option value="@((int)reportPeriod)">@reportPeriod.ToString().Replace('_', ' ')</option>
                            }
                        }
                    </select>
                </div>
                <a class="btn btn-primary btn-md me-2 ms-2" style="height:38px;" @onclick="NavigateToReportsPage"> <i class="fa fa-times fs-15"></i></a>
            </div>
        </div>

        <div class="row">
            <div class="col-12">
                <div class="card">
                    <div class="card-body">
                        <div class="row pt-5 pb-5">
                            <div class="col-lg-12 text-center">
                                <p class="fs-18 fw-bold mb-0">@TrialBalance.ClientName</p>
                                <p class="h3 mb-1">Balancesheet</p>
                                <p>As of @TrialBalanceReportPostModel.Date.Value.ToString("dd/MM/yyy")</p>
                            </div>
                        </div>
                        <div class="table-responsive push">
                            <table class="table table-bordered table-hover mb-0 text-nowrap">
                                <tbody>
                                    <tr class="">
                                        <th>Account</th>
                                        <th class="text-center">Net Debit</th>
                                        <th class="text-end">Net Credit</th>
                                    </tr>
                                    @foreach (var trialBalanceItem in TrialBalance.Groups)
                                    {
                                        <tr style="color:var(--primary-bg-color)">
                                            <td>
                                                <a class="toggle-icon" @onclick="() => HandleShowItemButtonClick(trialBalanceItem)">
                                                    <i class="@(!trialBalanceItem.ShowItems? "fa fa-plus ms-2" : "fa fa-minus ms-2")"></i>
                                                    <span class="ms-2">@trialBalanceItem.AccountGroupName</span>
                                                </a>
                                            </td>
                                            <td class="text-center">@(!trialBalanceItem.ShowItems ? trialBalanceItem.Debit : "0.00")</td>
                                            <td class="text-end"><a>@(!trialBalanceItem.ShowItems ? trialBalanceItem.Credit : "0.00")</a></td>
                                        </tr>

                                        @if (trialBalanceItem.ShowItems)
                                        {
                                            @foreach (var groupItem in trialBalanceItem.GroupItems)
                                            {
                                                <tr>
                                                    <td style="padding-left: 50px;"><a class="exp-tbl">@groupItem.LedgerName</a></td>
                                                    <td class="text-center">@groupItem.Debit</td>
                                                    <td class="text-end">@groupItem.Credit</td>
                                                </tr>
                                            }
                                        }
                                    }
                                    <tr>
                                        <td class="fw-bold text-uppercase h4">Total</td>
                                        <td class="text-center fw-bold h4">@TrialBalance.Groups.Sum(group => group.Debit) </td>
                                        <td class="fw-bold text-end h4">@TrialBalance.Groups.Sum(group => group.Credit)</td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</PageLayoutNew>

<div class="modal fade" id="ReportPeriodModal">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <EditForm Model="TrialBalanceReportPostModel" OnValidSubmit="async () => await LoadTrialbalanceReport()">
                <div class="modal-header">
                    <h6 class="modal-title">Custom</h6><button aria-label="Close" class="btn-close" data-bs-dismiss="modal"><span aria-hidden="true">&times;</span></button>
                </div>
                <div class="modal-body">
                    @if (PeriodTypeID == (int)ReportPeriods.Custom)
                    {
                        <div class="row">
                            <div class="col-12">
                                <div class="form-group">
                                    <label class="form-label mt-0 me-1">From Date : </label>
                                    <input type="date" class="form-control" @bind="TrialBalanceReportPostModel.Date">
                                    <ValidationMessage For="() => TrialBalanceReportPostModel.Date" />
                                </div>
                            </div>
                        </div>
                    }
                    @if (Branches.Count > 1)
                    {
                        <div class="row">
                            <div class="col-12">
                                <div class="form-group">
                                    <label class="form-label mt-0 me-1">To Date : </label>
                                    <select name="country" id="timePeriodSelect" class="form-control form-select" @bind="TrialBalanceReportPostModel.BranchID">
                                        <option value="0">Choose</option>
                                        @foreach (var branch in Branches)
                                        {
                                            <option value="@(branch.ID)">@branch.Value</option>
                                        }
                                    </select>
                                    <ValidationMessage For="() => TrialBalanceReportPostModel.BranchID" />
                                </div>
                            </div>
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button class="btn btn-danger" data-bs-dismiss="modal">Close</button>
                    <button type="submit" class="btn btn-primary">Apply</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {

    TrialBalanceReportModel TrialBalance = new();
    TrialBalanceReportPostModel TrialBalanceReportPostModel = new();
    List<IdnValuePair> Branches = new();

    protected override async Task OnInitializedAsync()
    {
        Branches = await API.GetAsync<List<IdnValuePair>>("common/get-branch-list", true);
        if (Branches.Count == 1)
            TrialBalanceReportPostModel.BranchID = Branches[0].ID;
        TrialBalanceReportPostModel.Date = DateTime.UtcNow;
        PeriodTypeID = (int)ReportPeriods.Today;
        await LoadTrialbalanceReport();
    }
    int PeriodTypeID = 0;
    private async Task HandleReportPeriodSelected(ChangeEventArgs e)
    {
        PeriodTypeID = Convert.ToInt32(e.Value);
        TrialBalanceReportPostModel.Date = null;
        if (PeriodTypeID == (int)ReportPeriods.Custom || Branches.Count > 1)
        {
            await JS.InvokeVoidAsync("ShowModal", "ReportPeriodModal");
            return;
        }
        switch (PeriodTypeID)
        {
            case (int)ReportPeriods.Today:
            case (int)ReportPeriods.This_week:
                TrialBalanceReportPostModel.Date = DateTime.UtcNow;
                break;

            case (int)ReportPeriods.This_month:
                TrialBalanceReportPostModel.Date = new DateTime(DateTime.UtcNow.Year, DateTime.UtcNow.Month, DateTime.DaysInMonth(DateTime.UtcNow.Year, DateTime.UtcNow.Month));
                break;

            case (int)ReportPeriods.This_quarter:
                int currentQuarter = (DateTime.UtcNow.Month - 1) / 3 + 1;
                int lastMonthOfQuarter = currentQuarter * 3;
                TrialBalanceReportPostModel.Date = new DateTime(DateTime.UtcNow.Year, lastMonthOfQuarter, DateTime.DaysInMonth(DateTime.UtcNow.Year, lastMonthOfQuarter));

                break;

            case (int)ReportPeriods.This_year:
                TrialBalanceReportPostModel.Date = new DateTime(DateTime.UtcNow.Year, 12, 31);
                break;

            case (int)ReportPeriods.Yesterday:
                TrialBalanceReportPostModel.Date = DateTime.UtcNow.AddDays(-1);
                break;

            case (int)ReportPeriods.Previous_week:
                int daysToSubtract = (int)DateTime.UtcNow.DayOfWeek - (int)DayOfWeek.Sunday;
                if (daysToSubtract < 0)
                    daysToSubtract += 7;
                TrialBalanceReportPostModel.Date = DateTime.UtcNow.AddDays(-daysToSubtract);
                break;

            case (int)ReportPeriods.Previous_month:
                DateTime firstDayOfThisMonth = new DateTime(DateTime.UtcNow.Year, DateTime.UtcNow.Month, 1);
                TrialBalanceReportPostModel.Date = firstDayOfThisMonth.AddDays(-1);
                break;

            case (int)ReportPeriods.Previous_quarter:
                TrialBalanceReportPostModel.Date = GetEndOfPreviousQuarter(DateTime.UtcNow);
                break;

            case (int)ReportPeriods.Previous_year:
                TrialBalanceReportPostModel.Date = new DateTime(DateTime.UtcNow.Year - 1, 12, 31);
                break;
        }
        await LoadTrialbalanceReport();
    }
    static DateTime GetEndOfPreviousQuarter(DateTime currentDate)
    {
        DateTime startOfCurrentQuarter = new DateTime(currentDate.Year, ((currentDate.Month - 1) / 3) * 3 + 1, 1);
        DateTime endOfPreviousQuarter = startOfCurrentQuarter.AddDays(-1);
        return endOfPreviousQuarter;
    }
    private async Task LoadTrialbalanceReport()
    {
        TrialBalance = await API.PostAsync<TrialBalanceReportModel, TrialBalanceReportPostModel>("report/trial-balance", TrialBalanceReportPostModel);
    }
    private void NavigateToReportsPage()
    {
        Nav.NavigateTo("reports");
    }
    private void HandleShowItemButtonClick(TrialBalanceReportGroupModel reportGroupModel)
    {
        bool flag = TrialBalance.Groups
            .Where(trialBalanceItemGroup => trialBalanceItemGroup.AccountGroupID == reportGroupModel.AccountGroupID)
            .First().ShowItems;

        TrialBalance.Groups
        .Where(trialBalanceItemGroup => trialBalanceItemGroup.AccountGroupID == reportGroupModel.AccountGroupID)
        .First().ShowItems = !flag;

        StateHasChanged();
    }
}
