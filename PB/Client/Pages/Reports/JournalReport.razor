@using PB.Shared.Enum.Reports
@using PB.Shared.Models.Reports
@page "/journal-report"

<PageLayoutNew>
    <div class="main-container container-fluid">
        <div class="page-header d-flex justify-content-between">
            <h1 class="page-title">Reports</h1>
            <div class="btn-toolbar float-right mr-7">
                <div class="form-group">
                    <select name="country" id="timePeriodSelect" class="form-control form-select" @onchange="(ChangeEventArgs e) => HandleReportPeriodSelected(e)">
                        <option value="0">Choose</option>
                        @foreach (var reportPeriod in Enum.GetValues(typeof(ReportPeriods)))
                        {
                            if (PeriodTypeID == (int)reportPeriod)
                            {
                                <option value="@((int)reportPeriod)" selected>@reportPeriod.ToString().Replace('_',' ')</option>
                            }
                            else
                            {
                                <option value="@((int)reportPeriod)">@reportPeriod.ToString().Replace('_', ' ')</option>
                            }
                        }
                    </select>
                </div>
                <a class="btn btn-primary btn-md me-2 ms-2" style="height:38px;" @onclick="NavigateToReportsPage"> <i class="fa fa-times fs-15"></i></a>
            </div>
        </div>
        <div class="row">
            <div class="col-12">
                <div class="card">
                    <div class="card-body">
                        <div class="row pt-5 pb-5">
                            <div class="col-lg-12 text-center">
                                <p class="fs-18 fw-bold mb-0">@JournalReportModel.ClientName</p>
                                <p class="h3 mb-1">Journal Report</p>
                                <p>@("From " + JournalReportPostModel.FromDate.Value.ToString("dd/MM/yyy") + " To " + JournalReportPostModel.ToDate.Value.ToString("dd/MM/yyy"))</p>
                            </div>
                        </div>
                        <div class="table-responsive push">
                            <table class="table table-bordered table-hover mb-0 text-nowrap">
                                <tbody>
                                    @foreach (var journalEntry in JournalReportModel.Entries)
                                    {
                                        string description = journalEntry.Date.ToString("dd/MM/yyy") + " - " + (!string.IsNullOrEmpty(journalEntry.Particular) ? journalEntry.Particular + '(' + journalEntry.JournalNoWithPrefix + ')' : '(' + journalEntry.JournalNoWithPrefix + ')');
                                        <tr class="">
                                            <th>@description</th>
                                            <th class="text-end">Debit</th>
                                            <th class="text-end">Credit</th>
                                        </tr>
                                        @foreach (var item in journalEntry.Items) 
                                        {
                                            <tr>
                                                <td>@item.Account</td>
                                                <td class="text-end">@item.Debit</td>
                                                <td class="text-end">@item.Credit</td>
                                            </tr>
                                        }
                                        <tr>
                                            <td></td>
                                            <td class="text-end fw-bold h5">@(journalEntry.Items.Sum(i => i.Debit))</td>
                                            <td class="text-end fw-bold h5">@(journalEntry.Items.Sum(i => i.Credit))</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                    <div class="card-footer text-end">
                        <button type="button" class="btn btn-secondary mb-1"
                                onclick="javascript:window.print();">
                            <i class="si si-share me-1"></i> Share
                        </button>
                        <button type="button" class="btn btn-danger mb-1"
                                onclick="javascript:window.print();">
                            <i class="si si-printer me-1"></i> Print
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</PageLayoutNew>

<div class="modal fade" id="ReportPeriodModal">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <EditForm Model="JournalReportPostModel" OnValidSubmit="async () => await LoadJournalReport()">
                <div class="modal-header">
                    <h6 class="modal-title">Custom</h6><button type="button" aria-label="Close" class="btn-close" data-bs-dismiss="modal"><span aria-hidden="true">&times;</span></button>
                </div>
                <div class="modal-body">

                    @if(PeriodTypeID == (int)ReportPeriods.Custom)
                    {
                        <div class="row">
                            <div class="col-12">
                                <div class="form-group">
                                    <label class="form-label mt-0 me-1">From Date : </label>
                                    <input type="date" class="form-control" @bind="JournalReportPostModel.FromDate">
                                    <ValidationMessage For="() => JournalReportPostModel.FromDate" />
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-12">
                                <div class="form-group">
                                    <label class="form-label mt-0 me-1">To Date : </label>
                                    <input type="date" class="form-control" @bind="JournalReportPostModel.ToDate">
                                    <ValidationMessage For="() => JournalReportPostModel.ToDate" />
                                </div>
                            </div>
                        </div>
                    }

                    @if (JournalReportPostModel.IsAdmin && Branches.Count > 1)
                    {
                        <div class="row">
                            <div class="col-12">
                                <div class="form-group">
                                    <label class="form-label mt-0 me-1">Branch : </label>
                                    <select name="country" id="timePeriodSelect" class="form-control form-select" @bind="JournalReportPostModel.BranchID">
                                        <option value="0">Choose</option>
                                        @foreach (var branch in Branches)
                                        {
                                            <option value="@(branch.ID)">@branch.Value</option>
                                        }
                                    </select>
                                    <ValidationMessage For="() => JournalReportPostModel.BranchID" />
                                </div>
                            </div>
                        </div>
                    }

                </div>
                <div class="modal-footer">
                    <button class="btn btn-danger" data-bs-dismiss="modal">Close</button>
                    <button type="submit" class="btn btn-primary">Apply</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>


@code {

    [Inject] public AuthenticationStateProvider? AuthenticationStateProvider { get; set; }
    private JournalReportModel JournalReportModel = new();
    private JournalReportPostModel JournalReportPostModel = new();
    List<IdnValuePair> Branches = new();

    int PeriodTypeID = 0;
    protected override async Task OnInitializedAsync()
    {
        if (AuthenticationStateProvider is not null)
        {
            var localStateProvider = (LocalAuthenticationStateProvider)AuthenticationStateProvider;
            var authState = await localStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            bool IsAuthenticated = user.Identity is not null ? user.Identity.IsAuthenticated : false;
            if (IsAuthenticated)
            {
                if (user.Claims.First(c => c.Type == "UserTypeID").Value == ((int)UserTypes.Client).ToString())
                {
                    JournalReportPostModel.IsAdmin = true;
                    Branches = await API.GetAsync<List<IdnValuePair>>("common/get-branch-list", true);
                    if (Branches.Count == 1)
                        JournalReportPostModel.BranchID = Branches[0].ID;
                }
            }
        }
        JournalReportPostModel.FromDate = JournalReportPostModel.ToDate = DateTime.UtcNow;
        PeriodTypeID = (int)ReportPeriods.Today;
        await LoadJournalReport();
    }
    private async Task HandleReportPeriodSelected(ChangeEventArgs e)
    {
        PeriodTypeID = Convert.ToInt32(e.Value);
        JournalReportPostModel.ToDate = JournalReportPostModel.FromDate = null;
        if (PeriodTypeID == (int)ReportPeriods.Custom || Branches.Count > 1)
        {
            await JS.InvokeVoidAsync("ShowModal", "ReportPeriodModal");
            return;
        }
        switch (PeriodTypeID)
        {
            case (int)ReportPeriods.Today:
                JournalReportPostModel.FromDate = JournalReportPostModel.ToDate = DateTime.UtcNow;
                break;

            case (int)ReportPeriods.This_week:
                JournalReportPostModel.ToDate = DateTime.UtcNow;
                JournalReportPostModel.FromDate = JournalReportPostModel.ToDate.Value.AddDays(-(int)JournalReportPostModel.ToDate.Value.DayOfWeek);
                break;

            case (int)ReportPeriods.This_month:
                JournalReportPostModel.ToDate = DateTime.UtcNow;
                JournalReportPostModel.FromDate = new DateTime(JournalReportPostModel.ToDate.Value.Year, JournalReportPostModel.ToDate.Value.Month, 1);
                break;

            case (int)ReportPeriods.This_quarter:
                JournalReportPostModel.ToDate = DateTime.UtcNow;
                int quarter = (JournalReportPostModel.ToDate.Value.Month - 1) / 3 + 1;
                JournalReportPostModel.FromDate = new DateTime(JournalReportPostModel.ToDate.Value.Year, (quarter - 1) * 3 + 1, 1);
                break;

            case (int)ReportPeriods.This_year:
                JournalReportPostModel.ToDate = DateTime.UtcNow;
                JournalReportPostModel.FromDate = new DateTime(JournalReportPostModel.ToDate.Value.Year, 1, 1);
                break;

            case (int)ReportPeriods.Yesterday:
                JournalReportPostModel.ToDate = JournalReportPostModel.FromDate = DateTime.UtcNow.AddDays(-1);
                break;

            case (int)ReportPeriods.Previous_week:
                int daysToPreviousSunday = (int)DateTime.UtcNow.DayOfWeek - (int)DayOfWeek.Sunday;
                JournalReportPostModel.FromDate = DateTime.UtcNow.AddDays(-daysToPreviousSunday - 7);
                JournalReportPostModel.ToDate = JournalReportPostModel.FromDate.Value.AddDays(6);
                break;

            case (int)ReportPeriods.Previous_month:
                DateTime firstDayOfMonth = new DateTime(DateTime.UtcNow.Year, DateTime.UtcNow.Month, 1);
                JournalReportPostModel.ToDate = firstDayOfMonth.AddDays(-1);
                JournalReportPostModel.FromDate = JournalReportPostModel.ToDate.Value.AddMonths(-1).AddDays(1);
                break;

            case (int)ReportPeriods.Previous_quarter:
                JournalReportPostModel.FromDate = GetPreviousQuarterStart(DateTime.UtcNow);
                JournalReportPostModel.ToDate = GetPreviousQuarterEnd(DateTime.UtcNow);
                break;

            case (int)ReportPeriods.Previous_year:
                int previousYear = DateTime.UtcNow.Year - 1;
                JournalReportPostModel.FromDate = new DateTime(previousYear, 1, 1);
                JournalReportPostModel.ToDate = new DateTime(previousYear, 12, 31);
                break;
        }
        await LoadJournalReport();
    }
    static DateTime GetPreviousQuarterStart(DateTime date)
    {
        int quarter = (date.Month - 1) / 3;
        int startMonth = quarter * 3 + 1;
        return new DateTime(date.Year, startMonth, 1);
    }
    static DateTime GetPreviousQuarterEnd(DateTime date)
    {
        int quarter = (date.Month - 1) / 3;
        int endMonth = quarter * 3 + 3;
        int lastDay = DateTime.DaysInMonth(date.Year, endMonth);
        return new DateTime(date.Year, endMonth, lastDay);
    }
    private async Task LoadJournalReport()
    {
        JournalReportModel = await API.PostAsync<JournalReportModel, JournalReportPostModel>("report/general-ledger", JournalReportPostModel);
    }
    private void NavigateToReportsPage()
    {
        Nav.NavigateTo("reports");
    }
}