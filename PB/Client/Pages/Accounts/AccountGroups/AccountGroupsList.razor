@using PB.Client.Shared.Accounts;
@using PB.Shared.Enum.Accounts
@using PB.Shared.Models;
@using PB.CRM.Model.Enum;
@using PB.Shared.Models.Accounts.AccountGroups;
@using PB.Shared.Models.Common;

@page "/account-groups"

<PageLayoutNew>
    <div class="main-container container-fluid">
        <div class="page-header">
            <div class="card">
                <div class="card-header py-2">
                    <ListPageHeader Settings="AccountGroupsFilterSettings" OnFilterButtonClick="(Func<PagedListPostModelWithFilter, Task>)ApplyFilterTo" OnAddButtonClick="async () => await OpenAccountGroupModal()" />
                </div>
                <div class="card-body">
                    <div class="row mt-2">
                        <div class="table-responsive">
                            <table class="table border text-nowrap text-md-nowrap mb-0 mt-2 ">
                                <thead>
                                    <tr>
                                        <th>
                                            Sl No.
                                        </th>
                                        <th>
                                            Group Name
                                        </th>
                                        <th>
                                            Group Code
                                        </th>
                                        <th>
                                            Parent Group/Group Type
                                        </th>
                                        <th class="d-flex justify-content-around">
                                            Action
                                        </th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var item in AccountGroupList.Data.Select((value, i) => new { i, value }))
                                    {
                                        var entry = item.value;
                                        var index = item.i;
                                        <tr>
                                            <td>
                                                @if (AccountGroupList.PageIndex == 1)
                                                {
                                                    @(index + 1)
                                                }
                                                else
                                                {
                                                    @((AccountGroupList.PageIndex * AccountGroupList.PageSize) + (index + 1) - 10)
                                                }
                                            </td>
                                            <td>
                                                @entry.AccountGroupName
                                            </td>
                                            <td>
                                                @entry.AccountGroupCode
                                            </td>
                                            <td>
                                                @entry.ParentOrGroupTypeName
                                            </td>
                                            <td>
                                                <div class="d-flex justify-content-around">
                                                    <div>
                                                        <ActionEdit Clicked="@(async () => await OpenAccountGroupModal(entry.AccountGroupID))" />
                                                    </div>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                            <PaginationCustom PageSize="AccountGroupList.PageSize" TotalCount="AccountGroupList.TotalCount" TotalPages="AccountGroupList.TotalPages" PageIndex="AccountGroupList.PageIndex" LoadPageIndex="SetPageIndex" />
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</PageLayoutNew>

<!--Account Group Modal-->
<ModalAccountGroup @ref="@accountGroupModal" Refresh="async (IdnValuePair? accountGroup) => await HandleAccountGroupAdded(accountGroup)" />

@code {

    private PagedList<AccountGroupListModel> AccountGroupList = new();
    private PagedListPostModelWithFilter ListPageSearchModel = new();
    private ModalAccountGroup accountGroupModal = new();

    private HeaderSettingsModel? AccountGroupsFilterSettings;
    private AccountGroupModel NewAccountGroup = new();

    private bool IsHeaderReady = false;

    #region List Page Related Functions

    protected override async Task OnInitializedAsync()
    {
        List<FilterSortInputModel> SortInputItems = new()
        {
            new()
            {
                DisplayName = "Group Name",
                FieldName = "A.AccountGroupName"
            },
            new()
            {
                DisplayName = "Group Code",
                FieldName = "A.AccountGroupCode"
            },
            new()
            {
                DisplayName = "Parent Group",
                FieldName = "P.AccountGroupName"
            }
        };
        List<FilterIdnValueInputModel> FilterInputItems = new()
        {
            new()
            {
                DisplayName = "Group Type",
                FiledName = "A.GroupTypeID",
                EnumObject = AccountGroupTypes.Assets,
            },
        };
        AccountGroupsFilterSettings = new()
            {
                Heading = "Account Groups",
                NeedAddButton = true,
                AddButtonText = "Account Group",
                SearchPlaceHolder = "Search account group..",
                NeedSortOption = true,
                SortMenuItems = SortInputItems,
                NeedFilterOption = true,
                IdnValueFilters = FilterInputItems
            };

        IsHeaderReady = true;
        await LoadData();
    }
    private async Task ApplyFilterTo(PagedListPostModelWithFilter? filterModel)
    {
        ListPageSearchModel = filterModel == null ? new() : filterModel;
        await LoadData();
    }
    private async Task SetPageIndex(int pageIndex)
    {
        ListPageSearchModel.PageIndex = pageIndex;
        await LoadData();
    }
    private async Task LoadData()
    {
        AccountGroupList = await API.PostAsync<PagedList<AccountGroupListModel>, PagedListPostModelWithFilter>("accounts/get-account-groups-paged-list", ListPageSearchModel);
    }

    #endregion

    #region Modal Account Group Related Functions

    private async Task OpenAccountGroupModal(int accountGroupID = 0)
    {
        await accountGroupModal.OpenAccountGroupModal(accountGroupID);
    }
    private async Task HandleAccountGroupAdded(IdnValuePair? accountGroup = null)
    {
        await LoadData();
    }

    #endregion
}
