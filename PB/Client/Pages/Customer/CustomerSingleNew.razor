@page "/customer-new"
@page "/customer-new/{CustomerEntityID:int}"

@attribute [Authorize(Roles = "Customer")]

@using PB.Client.Shared.Entity
@using PB.Client.Shared.Inventory.Customer
@using PB.Client.Shared.Inventory.Item
@using PB.Shared.Models;
@using PB.CRM.Model.Enum;
@using PB.Model.Models;
@using PB.Shared.Models.Inventory.Item
@using PB.Shared.Tables;
@using PB.Shared.Enum;
@using PB.Shared.Models.Common;
@using PB.Shared.Models.CRM.Customer;

<PageLayoutNew>
    <EditForm Model="CustomerModel" OnValidSubmit="SaveCustomer">
        <DataAnnotationsValidator />
        <div class="main-container container-fluid">
            <div class="row page-header ">
                <div class="col-12">
                    <div class="card">
                        <div class="card-header">
                            <h5 style="margin-bottom: 0 !important;">Customer Details</h5>
                        </div>
                        <div class="card-body">
                            <div class="col-7">
                                <div class="my-4 d-flex gap-3">

                                    <label class="custom-control custom-radio">
                                        <input type="radio" class="custom-control-input" @onchange="@(() => CustomerModel.Type = (int)CustomerTypes.Individual)" name="example-radios" value="option1" checked="@(CustomerModel.Type == (int)CustomerTypes.Individual)">
                                        <span class="custom-control-label">Individual</span>
                                    </label>
                                    <label class="custom-control custom-radio">
                                        <input type="radio" class="custom-control-input" @onchange="@(() => CustomerModel.Type = (int)CustomerTypes.Business)" name="example-radios" value="option1" checked="@(CustomerModel.Type == (int)CustomerTypes.Business)">
                                        <span class="custom-control-label">Business</span>
                                    </label>
                                </div>
                            </div>
                            @if (CustomerModel.Type == (int)CustomerTypes.Business)
                            {
                                <div class="row">
                                    <InputTextBox Label="Company Name : "
                                                  IsRequired="true"
                                                  ValidationFor="() => CustomerModel.CompanyName"
                                                  DivClass="col-md-7"
                                                  @bind-Value="CustomerModel.CompanyName"
                                                  id="cst-name-box" />
                                </div>
                            }
                            <div class="row">
                                <InputTextBox Label="Name : " @bind-Value="CustomerModel.Name"
                                              IsRequired="true"
                                              ValidationFor="() => CustomerModel.Name"
                                              DivClass="col-md-7" id="cst-name-box" />


                            </div>

                            <div class="row">
                                <InputTextBox Label="Tax Number : "
                                              IsRequired="false"
                                              DivClass="col-md-7"
                                              @bind-Value="CustomerModel.TaxNumber"
                                              id="cst-taxno-box" />
                            </div>
                            <div class="row">
                                <DropdownSelect DivClass="col-sm-7"
                                                DropdownID="@CustomerCountryDropdownID"
                                                Label="Country :"
                                                Mode="(int)DropdownModes.Country"
                                                ModeGroup="(int)DropdownModes.CommonSearch"
                                                ItemSelected="HandleCustomerCountrySelected"
                                                IsRequired="false"
                                                ReadDataOnSearch="true"
                                                PlaceHolder="Choose"
                                                SelectedItem="@(new DropdownSelectedItemModel(){ID=CustomerModel.CountryID,Value=CustomerModel.CountryName})">

                                    @*  <ValidationMessage For="() => CustomerModel.CountryID" /> *@
                                </DropdownSelect>
                            </div>

                            <div class="row">
                                <div class="col-md-7">
                                    <div class="form-group">
                                        <label class="form-label mt-0 me-1" style="text-align:left;">
                                            Phone :
                                            @*  <span class="ms-1" style="color:red">*</span> *@
                                        </label>
                                        <div class="input-group">
                                            <span class="input-group-text" style="min-width:40px;">
                                                @CustomerModel.ISDCode
                                            </span>
                                            <input type="text" class="form-control" @bind="CustomerModel.Phone" />
                                        </div>
                                        @* <ValidationMessage For="() => CustomerModel.Phone" /> *@
                                    </div>
                                </div>
                            </div>

                            <div class="row">
                                <div class="col-md-7">
                                    <div class="form-group">
                                        <label class="form-label mt-0 me-1" style="text-align:left;">
                                            Email :
                                        </label>
                                        <div class="input-group">
                                            <span class="input-group-text">
                                                <i class="fa fa-envelope envclr"></i>
                                            </span>
                                            <input type="text" class="form-control" @bind="CustomerModel.EmailAddress" />
                                        </div>
                                        <ValidationMessage For="() => CustomerModel.EmailAddress" />
                                    </div>
                                </div>
                            </div>

                            <!-- Aditional Content End-->
                            @if (Stage == 2)
                            {
                                <div class="row">
                                    <!--Switching Tabs-->
                                    <div class="panel panel-primary">
                                        <div class="tab-menu-heading">
                                            <div class="tabs-menu1">
                                                <!-- Tab Heading -->
                                                <ul class="nav panel-tabs">
                                                    <li>
                                                        <a href="#customerModalAddress" class="active" data-bs-toggle="tab">Address</a>
                                                    </li>
                                                    <li>
                                                        <a href="#customerModalContactPersons" data-bs-toggle="tab">Contact Persons</a>
                                                    </li>
                                                    <li>
                                                        <a href="#customerModalRemarks" data-bs-toggle="tab">Additional Details</a>
                                                    </li>
                                                    <li>
                                                        <a href="#customerModalServices" data-bs-toggle="tab">Customer Services</a>
                                                    </li>
                                                </ul>
                                            </div>
                                        </div>
                                        <!--Tab Main Content-->
                                        <div class="panel-body tabs-menu-body">
                                            <div class="tab-content">

                                                <!--First Tab-->
                                                <div class="tab-pane active" id="customerModalAddress">
                                                    <!--Addresses-->
                                                    <div class="row">
                                                        <div class="col-md-12">
                                                            @if (CustomerModel.Addresses.Count > 0)
                                                            {
                                                                <div class="list-group">
                                                                    @foreach (var customerAddress in CustomerModel.Addresses)
                                                                    {
                                                                        var addressLines = customerAddress.CompleteAddress.Split(',');
                                                                        <div class="list-group">
                                                                            <a class="list-group-item list-group-item-action mt-2 d-flex justify-content-between">
                                                                                <div class="address-content">
                                                                                    @foreach (var line in addressLines.Select((ln, i) => new { ln, i }))
                                                                                    {
                                                                                        <span>
                                                                                            @(line.ln)
                                                                                            @(line.i != (addressLines.Length - 1) ? "," : "")
                                                                                        </span> <br>
                                                                                    }
                                                                                </div>
                                                                                <div class="action d-flex flex-column">
                                                                                    <a class="position-absolute address-edit-btn" @onclick="async () => await HandleOpenAddressModal(customerAddress)">
                                                                                        <i class="fe fe-edit" style="color:var(--primary-bg-color)"></i>
                                                                                    </a>
                                                                                    <a class="position-absolute address-delete-btn" @onclick="async () => await RemoveCustomerAddress(customerAddress.AddressID)">
                                                                                        <i class="fe fe-trash" style="color:var(--danger)"></i>
                                                                                    </a>
                                                                                </div>
                                                                            </a>
                                                                        </div>
                                                                    }
                                                                </div>
                                                            }
                                                            <a class="modal-effect address-add-btn mt-5 ms-3" style="color:var(--primary-bg-color)" @onclick="async () => await HandleOpenAddressModal()">Add new address</a>
                                                        </div>
                                                    </div>
                                                </div>

                                                <!--Second Tab-->
                                                <div class="tab-pane" id="customerModalContactPersons">
                                                    <!--Contact Persons-->
                                                    <div class="row">
                                                        <div class="table-responsive">
                                                            <table class="table border text-nowrap text-md-nowrap table-bordered mb-0">
                                                                <thead>
                                                                    <tr>
                                                                        <th style="max-width:25px">
                                                                            Sl No
                                                                        </th>
                                                                        <th>
                                                                            Name
                                                                        </th>
                                                                        <th>
                                                                            Phone
                                                                        </th>
                                                                        <th>
                                                                            Email
                                                                        </th>
                                                                        <th>
                                                                            Action
                                                                        </th>
                                                                    </tr>
                                                                </thead>
                                                                <tbody>
                                                                    @if (CustomerModel.ContactPersons != null && CustomerModel.ContactPersons.Count > 0)
                                                                    {
                                                                        @*  @for (int i = 0; i < CustomerModel.ContactPersons.Count; i++)
                                                                { *@
                                                                        @foreach (var person in CustomerModel.ContactPersons)
                                                                        {

                                                                        //var person = CustomerModel.ContactPersons[i];
                                                                            <tr>
                                                                                <td style="max-width:25px">
                                                                                    <label>@person.RowIndex</label>
                                                                                </td>
                                                                                <td>
                                                                                    @person.Name
                                                                                </td>
                                                                                <td>
                                                                                    @person.Phone
                                                                                </td>
                                                                                <td>
                                                                                    @person.Email
                                                                                </td>
                                                                                <td style="width:80px;">
                                                                                    <div class="d-flex justify-content-evenly">
                                                                                        <ActionEdit Clicked="async () => await HandleOpenContactPersonModal(person)" />
                                                                                        <ActionDelete Clicked="async () => await HandleRemoveCustomerContactPersonButtonClick(person.ContactPersonID)" />
                                                                                    </div>
                                                                                </td>
                                                                            </tr>
                                                                        }
                                                                        @*  } *@
                                                                    }
                                                                </tbody>
                                                                <tfoot>
                                                                    <tr>
                                                                        <td colspan="4">
                                                                        </td>
                                                                        <td style="width:80px;">
                                                                            <div class="d-flex justify-content-evenly">
                                                                                <ActionAdd Clicked="async () => await HandleOpenContactPersonModal()" />
                                                                            </div>
                                                                        </td>
                                                                    </tr>
                                                                </tfoot>
                                                            </table>
                                                        </div>
                                                    </div>
                                                </div>

                                                <!--Third Tab-->
                                                <div class="tab-pane" id="customerModalRemarks">

                                                    <div class="row">
                                                        <div class="col-md-4">
                                                            <div class="form-group">
                                                                <label class="form-label mt-0 me-1">Customer Since :</label>
                                                                <input type="date" class="form-control" @bind="CustomerModel.JoinedOn" id="join-date">
                                                            </div>
                                                        </div>

                                                        <div class="col-md-4">
                                                            <div class="form-group">
                                                                <label class="form-label mt-0 me-1">
                                                                    Customer Category :
                                                                    <span class="ms-1" style="color:red">*</span>
                                                                </label>
                                                                <div class="input-group">
                                                                    <DropdownSelect @ref="@CustomerCategoryDropdown"
                                                                                    DropdownID="@CustomerCategoryDropdownID"
                                                                                    DivClass="col-md-12 px-0"
                                                                                    IsRequired="true"
                                                                                    ReadDataOnSearch="true"
                                                                                    IsAddOptionNeed="true"
                                                                                    Mode="(int)DropdownModes.CustomerCategory"
                                                                                    ModeGroup="(int)DropdownModes.CommonSearch"
                                                                                    SelectedItem="@(new DropdownSelectedItemModel(){ID = CustomerModel.CategoryID, Value=CustomerModel.CategoryName})"
                                                                                    ItemSelected="async (DropdownItemSelectedCallbackModel category) => await HandleCustomerCategorySelected(category)"
                                                                                    NewButtonClicked="async (int dropdownMode) => await HandelAddNewCustomerCategoryButtonClick(dropdownMode)"
                                                                                    NewButtonText="Add Category" />

                                                                </div>
                                                                <ValidationMessage For="() => CustomerModel.CategoryID" />
                                                            </div>
                                                        </div>
                                                        <div class="col-md-4">
                                                            <div class="form-group">
                                                                <label class="form-label mt-0 me-1">
                                                                    Business Type :
                                                                    <span class="ms-1" style="color:red">*</span>
                                                                </label>
                                                                <div class="input-group">
                                                                    <DropdownSelect @ref="@BusinessTypeDropdown"
                                                                                    DropdownID="@BusinessTypeDropdownID"
                                                                                    DivClass="col-md-12 px-0"
                                                                                    IsRequired="true"
                                                                                    ReadDataOnSearch="true"
                                                                                    IsAddOptionNeed="true"
                                                                                    Mode="(int)DropdownModes.BusinessType"
                                                                                    ModeGroup="(int)DropdownModes.CommonSearch"
                                                                                    SelectedItem="@(new DropdownSelectedItemModel(){ID = CustomerModel.BusinessTypeID, Value=CustomerModel.BusinessTypeName})"
                                                                                    ItemSelected="async (DropdownItemSelectedCallbackModel business) => await HandleBusinessTypeSelected(business)"
                                                                                    NewButtonClicked="async (int dropdownMode) => await HandelAddNewBusinessTypeButtonClick(dropdownMode)"
                                                                                    NewButtonText="Add Business Type" />

                                                                </div>
                                                                <ValidationMessage For="() => CustomerModel.BusinessTypeID" />
                                                            </div>
                                                        </div>

                                                    </div>


                                                    <div class="row">
                                                        <div class="col-md-4">
                                                            <div class="form-group">
                                                                <label class="form-label mt-0 me-1" style="text-align:left;">
                                                                    Accountant Email :
                                                                </label>
                                                                <div class="input-group">
                                                                    <input type="text" class="form-control" @bind="CustomerModel.AccountantEmailID" />
                                                                </div>
                                                            </div>
                                                        </div>
                                                        <div class="col-md-4">
                                                            <div class="form-group">
                                                                <label class="form-label mt-0 me-1" style="text-align:left;">
                                                                    Accountant Contact :
                                                                </label>
                                                                <div class="input-group">
                                                                    <input type="text" class="form-control" @bind="CustomerModel.AccountantContactNo" />
                                                                </div>
                                                            </div>
                                                        </div>
                                                        <div class="col-md-4">
                                                            <div class="form-group">
                                                                <label class="form-label mt-0 me-1" style="text-align:left;">
                                                                    Tally registered Email ID :
                                                                </label>
                                                                <div class="input-group">
                                                                    <input type="text" class="form-control" @bind="CustomerModel.TallyEmailID" />
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>


                                                    <div class="row">
                                                        <div class="col-md-4">
                                                            <div class="form-group">
                                                                <label class="form-label mt-0 me-1">Tally Serial No :</label>
                                                                <input type="text" class="form-control" @bind="CustomerModel.TallyNos.TallySerialNo" id="join-serial-1">
                                                               
                                                            </div>
                                                        </div>
                                                        <div class="col-md-4">
                                                            <div class="form-group">
                                                                <label class="form-label mt-0 me-1">Tally Serial No2</label>
                                                                <input type="text" class="form-control" @bind="CustomerModel.TallyNos.TallySerialNo2" id="join-serial-2">
                                                            </div>
                                                        </div>
                                                        <div class="col-md-4">
                                                            <div class="form-group">
                                                                <label class="form-label mt-0 me-1">Tally Serial No3</label>
                                                                <input type="text" class="form-control" @bind="CustomerModel.TallyNos.TallySerialNo3" id="join-serial-3">
                                                            </div>
                                                        </div>
                                                    </div>

                                                    <div class="row">

                                                        <div class="col-md-4">
                                                            <div class="form-group">
                                                                <label class="form-label mt-0 me-1">Customer Priority</label>
                                                                <input type="text" class="form-control" @bind="CustomerModel.CustomerPriority" id="customer-priority">
                                                            </div>
                                                        </div>
                                                        <div class="col-md-4">
                                                            <div class="form-group">
                                                                <label class="form-label mt-0 me-1">
                                                                    Customer Owned By :
                                                                    <span class="ms-1" style="color:red">*</span>
                                                                </label>
                                                                <div class="input-group">
                                                                    <DropdownSelect @ref="@CustomerOwnedDropdown"
                                                                                    DropdownID="@CustomerOwnedDropdownID"
                                                                                    DivClass="col-md-12 px-0"
                                                                                    IsRequired="true"
                                                                                    ReadDataOnSearch="true"
                                                                                    IsAddOptionNeed="false"
                                                                                    Mode="(int)DropdownModes.QuotationCreatedStaff"
                                                                                    ModeGroup="(int)DropdownModes.CommonSearch"
                                                                                    SelectedItem="@(new DropdownSelectedItemModel(){ID = CustomerModel.OwnedBy, Value=CustomerModel.StaffName})"
                                                                                    ItemSelected="async (DropdownItemSelectedCallbackModel staff) => await HandleCustomerOwnedSelected(staff)" />

                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>

                                                    <!--Remarks-->
                                                    <div class="row">
                                                        <div class="col-12">
                                                            <div class="form-group">
                                                                <label class="form-label mt-0 me-1">Remarks:</label>
                                                                <textarea class="textarea form-control" id="customer-remarks-text-area" rows="4" @bind="CustomerModel.Remarks"></textarea>
                                                            </div>
                                                        </div>
                                                    </div>

                                                </div>


                                                <!--Service Tab-->
                                                <div class="tab-pane" id="customerModalServices">
                                                    <!--Contact Persons-->
                                                    <div class="row">
                                                        <div class="table-responsive service-table">
                                                            <table class="table border text-wrap text-md-nowrap table-bordered mb-0">
                                                                <thead>
                                                                    <tr>
                                                                        <th style="max-width:25px">
                                                                            Sl No
                                                                        </th>
                                                                        <th>
                                                                            Service Name
                                                                        </th>
                                                                        <th>
                                                                            Date
                                                                        </th>
                                                                        <th>
                                                                            Quantity
                                                                        </th>
                                                                        <th>
                                                                            Amount
                                                                        </th>
                                                                        @* <th>Purchase Date</th> *@
                                                                        <th>
                                                                            Expiry Date
                                                                        </th>
                                                                        <th>Action</th>
                                                                    </tr>
                                                                </thead>
                                                                <tbody>
                                                                    @if (CustomerModel.CustomerServices != null && CustomerModel.CustomerServices.Count > 0)
                                                                    {

                                                                        @foreach (var service in CustomerModel.CustomerServices)
                                                                        {

                                                                            <tr>
                                                                                <td style="max-width:25px">
                                                                                    <label>@service.RowIndex</label>
                                                                                </td>
                                                                                <td style="max-width:200px">
                                                                                    @service.ServiceName
                                                                                </td>
                                                                                <td style="max-width:100px">
                                                                                    @((service.Date != null ? service.Date.Value.ToString("dd/MM/yyyy") : "--/--/----"))
                                                                                </td>
                                                                                <td style="max-width:100px">
                                                                                    @service.Quantity
                                                                                </td>
                                                                                <td style="max-width:100px">
                                                                                    @service.Amount
                                                                                </td>
                                                                                @* <td style="max-width:100px">
                                                                                    @((service.PurchaseDate != null ? service.PurchaseDate.Value.ToString("dd/MM/yyyy") : "--/--/----"))

                                                                                </td> *@
                                                                                <td style="max-width:100px">
                                                                                    @((service.ExpiryDate != null ? service.ExpiryDate.Value.ToString("dd/MM/yyyy") : "--/--/----"))

                                                                                </td>
                                                                                <td style="width:80px;">
                                                                                    <div class="d-flex justify-content-evenly">
                                                                                        <ActionEdit Clicked="async () => await HandleOpenCustomerServiceModal(service)" />
                                                                                        <ActionDelete Clicked="async () => await HandleRemoveCustomerServiceButtonClick(service.ServiceID)" />
                                                                                    </div>
                                                                                </td>
                                                                            </tr>
                                                                        }
                                                                    }
                                                                </tbody>
                                                                <tfoot>
                                                                    <tr>
                                                                        <td style="width:50px" class="d-flex align-items-center jusify-content-center">
                                                                            @Footer.RowIndex
                                                                        </td>

                                                                        <td class="px-1" style="max-width:200px">
                                                                            <DropdownSelect DropdownID="@(FooterItemDropdownID)" @ref="@FooterItemDropdownSelect"
                                                                                            DivClass="col-md-12 px-0"
                                                                                            FormGroupClass="form-group mb-0"
                                                                                            IsAddOptionNeed="true"
                                                                                            ReadDataOnSearch="true"
                                                                                            RoleName="Item"
                                                                                            Mode="(int)DropdownModes.Item"
                                                                                            ModeGroup="(int)DropdownModes.CommonSearch"
                                                                                            SelectedItem="@(new DropdownSelectedItemModel(){ID = Footer.ItemID, Value = Footer.ServiceName})"
                                                                                            ItemSelected="ItemSelected"
                                                                                            NewButtonText="New Item"
                                                                                            NewButtonClicked="AddNewItem" />
                                                                        </td>
                                                                        <td style="max-width:100px">
                                                                            <input type="date" class="form-control" @bind="Footer.Date">
                                                                        </td>
                                                                        <td style="max-width:100px">
                                                                            <input type="text" class="form-control" id="footer-item-qty" @bind-value="@Footer.Quantity">
                                                                        </td>
                                                                        <td style="max-width:100px">
                                                                            <input type="text" class="form-control" id="footer-item-amt" @bind-value="@Footer.Amount">
                                                                        </td>

                                                                       @*  <td style="max-width:100px">
                                                                            @if (Footer.IsSubscription)
                                                                            {
                                                                                <input type="date" class="form-control" @bind="Footer.PurchaseDate">
                                                                            }

                                                                        </td> *@
                                                                        <td style="max-width:100px">
                                                                            @if (Footer.IsSubscription)
                                                                            {
                                                                                <input type="date" class="form-control" @bind="Footer.ExpiryDate">
                                                                            }
                                                                        </td>
                                                                        <td style="width:80px;">
                                                                            <div class="d-flex justify-content-evenly">
                                                                                <ActionAdd Clicked="async () => await SaveService()" />
                                                                            </div>
                                                                        </td>
                                                                    </tr>
                                                                </tfoot>
                                                            </table>
                                                        </div>
                                                    </div>
                                                </div>



                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="page-footer-action d-flex justify-content-end">
            <button type="submit" class="btn btn-primary me-2">Save</button>
            <button type="button" class="btn btn-danger me-2" @onclick="Cancel">Cancel</button>
        </div>

    </EditForm>
</PageLayoutNew>

@if (Stage == 2)
{
    <ModalEntityAddress @ref="modalEntityAddress" Saved="HandleAddressSaveEventCallback" Deleted="HandleRemoveAddressEventCallback" />
    <ModalCustomerEntityContactPerson @ref="entityContactPerson" Saved="HandleContactPersonSaveEventCallback" Deleted="HandleRemoveCntactPersonEventCallback" />
    <ModalItem @ref="@modalItem" Saved="ItemAdded" />
    <ModalCustomerServices @ref="@modalChildService" Saved="ServiceDatas" />
}

<ModalBusinessType @ref="@childBusinessTypeModal" Saved="(Func<IdnValuePair, Task>)HandleNewBusinessTypeAdded" />
<ModalCustomerCategory @ref="@childCustomerCategoryModal" Saved="(Func<IdnValuePair, Task>)HandleNewCustomerCategoryAdded" />


@code {

    [Parameter] public int CustomerEntityID { get; set; }

    private CustomerModelNew CustomerModel = new();
    private Country CountryModel = new();
    private int Stage = 1;
    private string CustomerCountryDropdownID = "customer-country-drop-down-select";

    protected override async Task OnInitializedAsync()
    {
        if (CustomerEntityID == 0)
        {
            Stage = 1;
            CountryModel = await API.GetAsync<Country>("common/get-default-country-details", true);
            CustomerModel.CountryID = CountryModel.CountryID;
            CustomerModel.CountryName = CountryModel.CountryName;
            CustomerModel.ISDCode = CountryModel.ISDCode;
            CustomerModel.AccountantISDCode = CountryModel.ISDCode;
        }
        else
        {
            Stage = 2;
            CustomerModel = await API.GetAsync<CustomerModelNew>($"customer/get-customer-new/{CustomerEntityID}", true);
        }
    }

    #region Main Functions

    private async Task SaveCustomer()
    {
        if(Stage ==2)
        {
            foreach (var tallySerialNo in new[] { CustomerModel.TallyNos.TallySerialNo, CustomerModel.TallyNos.TallySerialNo2, CustomerModel.TallyNos.TallySerialNo3 })
            {
                if (tallySerialNo.Length > 9)
                {
                    await JS.ErrorMessage($"{tallySerialNo} length cannot exceed 9 characters.");
                    return;
                }
            }
        }

        var res = await API.PostAsync<CustomerAddResultModel, CustomerModelNew>("customer/save-customer", CustomerModel);
        if (res != null)
        {
            Nav.NavigateTo($"customers-view/{res.EntityID}");
        }
    }
    private async Task Cancel()
    {
        if (await JS.Confirm("Confirm", "Are you sure you want to leave this page..?", SweetAlertMessageType.question, "Yes, Leave", "No, Cancel"))
        {
            if (CustomerModel.EntityID != 0)
                Nav.NavigateTo($"customers/{CustomerModel.EntityID}");
            else
                Nav.NavigateTo("customers");
        }
    }
    private void HandleCustomerCountrySelected(DropdownItemSelectedCallbackModel country)
    {
        CustomerModel.CountryID = country.ID;
        CustomerModel.CountryName = country.Value;
    }

    #endregion

    #region Address Modal Related Functions

    private ModalEntityAddress modalEntityAddress = new();
    private int addressItemIndex = -1;
    private async Task HandleOpenAddressModal(AddressView? addressView = null)
    {
        if (CustomerModel.EntityID is null)
        {
            Console.BackgroundColor = ConsoleColor.Red;
            Console.WriteLine("Only existing customer can add address");
            return;
        }

        int addressID = 0;
        int customerEntityID = CustomerModel.EntityID.Value;
        if (addressView is not null)
        {
            addressItemIndex = CustomerModel.Addresses.IndexOf(addressView);
            addressID = addressView.AddressID;
        }
        await modalEntityAddress.OpenEntityAddressModal(customerEntityID, addressID);
    }
    private async Task RemoveCustomerAddress(int addressID)
    {
        await modalEntityAddress.DeleteAddress(addressID);
    }
    private void HandleRemoveAddressEventCallback(int addressID)
    {
        CustomerModel
        .Addresses
        .Remove(
            CustomerModel
            .Addresses
            .Where(adrs => adrs.AddressID == addressID)
            .First()
        );
    }
    private void HandleAddressSaveEventCallback(IdnValuePair address)
    {
        if (addressItemIndex == -1)
        {
            CustomerModel
            .Addresses
            .Add(new AddressView()
                {
                    AddressID = address.ID,
                    CompleteAddress = address.Value
                });
        }
        else
        {
            CustomerModel
            .Addresses[addressItemIndex] = new()
                {
                    AddressID = address.ID,
                    CompleteAddress = address.Value
                };
        }
    }

    #endregion

    #region Contact Persons

    private ModalCustomerEntityContactPerson entityContactPerson = new();
    private int contactPersonIndex = -1;
    private async Task HandleOpenContactPersonModal(CustomerContactPersonModel? contactPerson = null)
    {
        int contactPersonID = 0;
        if (CustomerModel.EntityID is null)
        {
            Console.BackgroundColor = ConsoleColor.Red;
            Console.WriteLine("Only existing customer can add contact persons");
            return;
        }

        int customerEntityID = CustomerModel.EntityID.Value;
        if (contactPerson is not null)
        {
            contactPersonID = contactPerson.ContactPersonID;
            contactPersonIndex = CustomerModel.ContactPersons.IndexOf(contactPerson);
        }
        await entityContactPerson.OpenCustomerContactPersonModal(customerEntityID, contactPersonID);
    }
    private async Task HandleRemoveCustomerContactPersonButtonClick(int contactPersonID)
    {
        await entityContactPerson.DeleteContactPerson(contactPersonID);
    }
    private void HandleRemoveCntactPersonEventCallback(int contactPersonID)
    {
        CustomerModel
        .ContactPersons
        .Remove(
            CustomerModel
            .ContactPersons
            .Where(prs => prs.ContactPersonID == contactPersonID)
            .First()
        );
    }
    private async void HandleContactPersonSaveEventCallback(IdnValuePair contactPerson)
    {
        if (contactPersonIndex == -1)
        {
            CustomerModel
            .ContactPersons
            .Add
            (
                await API.GetAsync<CustomerContactPersonModel>($"customer/get-customer-contact-person/{contactPerson.ID}", true)
            );
        }
        else
        {
            CustomerModel
            .ContactPersons[contactPersonIndex] = await API.GetAsync<CustomerContactPersonModel>($"customer/get-customer-contact-person/{contactPerson.ID}", true);
        }
    }

    #endregion

    #region Business Type

    private DropdownSelect BusinessTypeDropdown = new();
    private string BusinessTypeDropdownID = "business-type-dropdown";

    private ModalBusinessType childBusinessTypeModal = new();
    private async Task HandleBusinessTypeSelected(DropdownItemSelectedCallbackModel business)
    {
        CustomerModel.BusinessTypeID = business.ID;
        CustomerModel.BusinessTypeName = business.Value;
    }
    private async Task HandelAddNewBusinessTypeButtonClick(int dropdownMode)
    {
        await childBusinessTypeModal.OpenBusinessTypeModal();
    }

    private async Task HandleNewBusinessTypeAdded(IdnValuePair business)
    {
        CustomerModel.BusinessTypeID = business.ID;
        CustomerModel.BusinessTypeName = business.Value;
    }

    #endregion

    #region Customer Category

    private DropdownSelect CustomerCategoryDropdown = new();
    private string CustomerCategoryDropdownID = "customer-category-dropdown";
    private ModalCustomerCategory childCustomerCategoryModal = new();

    private async Task HandleCustomerCategorySelected(DropdownItemSelectedCallbackModel business)
    {
        CustomerModel.CategoryID = business.ID;
        CustomerModel.CategoryName = business.Value;
    }
    private async Task HandelAddNewCustomerCategoryButtonClick(int dropdownMode)
    {
        await childCustomerCategoryModal.OpenCustomerCategoryModal();
    }

    private async Task HandleNewCustomerCategoryAdded(IdnValuePair business)
    {
        CustomerModel.CategoryID = business.ID;
        CustomerModel.CategoryName = business.Value;
    }

    #endregion

    #region Created For
    private DropdownSelect CustomerOwnedDropdown = new();
    private string CustomerOwnedDropdownID = "customer-owned-dropdown";
    private async Task HandleCustomerOwnedSelected(DropdownItemSelectedCallbackModel customer)
    {
        CustomerModel.OwnedBy = customer.ID;
        CustomerModel.StaffName = customer.Value;
    }
    #endregion


    #region Service Item

    private string RowItemDropdownID = "row-item-select-drop-down-";
    private string FooterItemDropdownID = "footer-item-select-drop-down";
    private DropdownSelect? FooterItemDropdownSelect;
    private DropdownSelect? RowItemDropdownSelect;
    private int currentRowIndex = -1;
    private bool isAnyRowInEditMode = false;
    private bool hasUnsavedChanges = false;

    private ModalItem modalItem = new();
    private CustomerServiceModel Footer = new();
    private async Task ItemSelected(DropdownItemSelectedCallbackModel data)
    {
        switch (data.DropdownMode)
        {
            case (int)DropdownModes.Item:

                await HandleItemSelectedTasks(data);
                break;
        }
    }

    private async Task AddNewItem(int mode)
    {
        switch (mode)
        {
            case (int)DropdownModes.Item:
                await modalItem.OpenItemModal();
                break;
        }
    }
    private async Task HandleItemSelectedTasks(DropdownItemSelectedCallbackModel item)
    {
        var itemDate = await API.GetAsync<ItemListModel>($@"customer/get-customer-service-item-details/{item.ID}");
        if (currentRowIndex == -1)
        {
            Footer.ItemID = item.ID;
            Footer.ServiceName = item.Value;
            Footer.IsSubscription = itemDate.IsSubscription;
        }
        else
        {
            CustomerModel.CustomerServices[currentRowIndex].ItemID = item.ID;
            CustomerModel.CustomerServices[currentRowIndex].ServiceName = item.Value;
            CustomerModel.CustomerServices[currentRowIndex].IsSubscription = itemDate.IsSubscription;

        }
    }

    private async Task ItemAdded(IdnValuePair item)
    {
        var itemDate = await API.GetAsync<ItemListModel>($@"customer/get-customer-service-item-details/{item.ID}");
        if (currentRowIndex == -1)
        {
            Footer.ItemID = item.ID;
            Footer.ServiceName = item.Value;
            Footer.IsSubscription = itemDate.IsSubscription;
        }
        else
        {
            CustomerModel.CustomerServices[currentRowIndex].ItemID = item.ID;
            CustomerModel.CustomerServices[currentRowIndex].ServiceName = item.Value;
            CustomerModel.CustomerServices[currentRowIndex].IsSubscription = itemDate.IsSubscription;
        }
    }
    #endregion

    #region Customer service related function
    ModalCustomerServices modalChildService = new();

    private async Task SaveService()
    {
        if (Footer.ItemID == null)
        {
            await JS.ErrorMessage("Please choose an item name");
            return;
        }
        if (Footer.Date == null)
        {
            await JS.ErrorMessage("Please enter date");
            return;
        }
        if (Footer.Quantity == null)
        {
            await JS.ErrorMessage("Please enter quantity");
            return;
        }
        if (Footer.Amount == null)
        {
            await JS.ErrorMessage("Please enter amount");
            return;
        }
        if (Footer.IsSubscription)
        {
            if (Footer.ExpiryDate == null)
            {
                await JS.ErrorMessage("Please enter expiry date");
                return;
            }
        }
        Footer.CustomerEntityID = CustomerEntityID;
        var res = await API.PostAsync<CustomerServiceSuccessModel, CustomerServiceModel>("customer/save-customer-service", Footer);
        if (res != null)
        {
            await GetCustomerServiceData();
            Footer = new();
        }
    }

    private async Task HandleOpenCustomerServiceModal(CustomerServiceModel? service = null)
    {
        await modalChildService.OpenCustomerCategoryModal(CustomerEntityID, service.ServiceID);
    }

    private async Task GetCustomerServiceData()
    {
        CustomerModel.CustomerServices = await API.GetAsync<List<CustomerServiceModel>>($@"customer/get-customer-service/{CustomerEntityID}");
    }

    private async Task ServiceDatas(IdnValuePair item)
    {
        await GetCustomerServiceData();
    }

    private async Task HandleRemoveCustomerServiceButtonClick(int serviceID)
    {
        if (await JS.Confirm("Confirm", "Are you sure you want to remove the customer service..?", SweetAlertMessageType.question, "Yes, Remove", "No, Cancel")
        && await API.GetAsync<bool>($"customer/delete-customer-service/{serviceID}", true))
        {
            await JS.SuccessMessage("Deleted Successfully");
            await GetCustomerServiceData();
        }
    }
    #endregion


}